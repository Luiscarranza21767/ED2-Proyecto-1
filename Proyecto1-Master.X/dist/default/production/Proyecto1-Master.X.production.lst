

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Mar 08 23:22:28 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42     0000                     
    43                           ; Version 2.40
    44                           ; Generated 17/11/2021 GMT
    45                           ; 
    46                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F887 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78     0000                     	;# 
    79     0001                     	;# 
    80     0002                     	;# 
    81     0003                     	;# 
    82     0004                     	;# 
    83     0005                     	;# 
    84     0006                     	;# 
    85     0007                     	;# 
    86     0008                     	;# 
    87     0009                     	;# 
    88     000A                     	;# 
    89     000B                     	;# 
    90     000C                     	;# 
    91     000D                     	;# 
    92     000E                     	;# 
    93     000E                     	;# 
    94     000F                     	;# 
    95     0010                     	;# 
    96     0011                     	;# 
    97     0012                     	;# 
    98     0013                     	;# 
    99     0014                     	;# 
   100     0015                     	;# 
   101     0015                     	;# 
   102     0016                     	;# 
   103     0017                     	;# 
   104     0018                     	;# 
   105     0019                     	;# 
   106     001A                     	;# 
   107     001B                     	;# 
   108     001B                     	;# 
   109     001C                     	;# 
   110     001D                     	;# 
   111     001E                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     0087                     	;# 
   117     0088                     	;# 
   118     0089                     	;# 
   119     008C                     	;# 
   120     008D                     	;# 
   121     008E                     	;# 
   122     008F                     	;# 
   123     0090                     	;# 
   124     0091                     	;# 
   125     0092                     	;# 
   126     0093                     	;# 
   127     0093                     	;# 
   128     0093                     	;# 
   129     0094                     	;# 
   130     0095                     	;# 
   131     0096                     	;# 
   132     0097                     	;# 
   133     0098                     	;# 
   134     0099                     	;# 
   135     009A                     	;# 
   136     009B                     	;# 
   137     009C                     	;# 
   138     009D                     	;# 
   139     009E                     	;# 
   140     009F                     	;# 
   141     0105                     	;# 
   142     0107                     	;# 
   143     0108                     	;# 
   144     0109                     	;# 
   145     010C                     	;# 
   146     010C                     	;# 
   147     010D                     	;# 
   148     010E                     	;# 
   149     010F                     	;# 
   150     0185                     	;# 
   151     0187                     	;# 
   152     0188                     	;# 
   153     0189                     	;# 
   154     018C                     	;# 
   155     018D                     	;# 
   156     0000                     	;# 
   157     0001                     	;# 
   158     0002                     	;# 
   159     0003                     	;# 
   160     0004                     	;# 
   161     0005                     	;# 
   162     0006                     	;# 
   163     0007                     	;# 
   164     0008                     	;# 
   165     0009                     	;# 
   166     000A                     	;# 
   167     000B                     	;# 
   168     000C                     	;# 
   169     000D                     	;# 
   170     000E                     	;# 
   171     000E                     	;# 
   172     000F                     	;# 
   173     0010                     	;# 
   174     0011                     	;# 
   175     0012                     	;# 
   176     0013                     	;# 
   177     0014                     	;# 
   178     0015                     	;# 
   179     0015                     	;# 
   180     0016                     	;# 
   181     0017                     	;# 
   182     0018                     	;# 
   183     0019                     	;# 
   184     001A                     	;# 
   185     001B                     	;# 
   186     001B                     	;# 
   187     001C                     	;# 
   188     001D                     	;# 
   189     001E                     	;# 
   190     001F                     	;# 
   191     0081                     	;# 
   192     0085                     	;# 
   193     0086                     	;# 
   194     0087                     	;# 
   195     0088                     	;# 
   196     0089                     	;# 
   197     008C                     	;# 
   198     008D                     	;# 
   199     008E                     	;# 
   200     008F                     	;# 
   201     0090                     	;# 
   202     0091                     	;# 
   203     0092                     	;# 
   204     0093                     	;# 
   205     0093                     	;# 
   206     0093                     	;# 
   207     0094                     	;# 
   208     0095                     	;# 
   209     0096                     	;# 
   210     0097                     	;# 
   211     0098                     	;# 
   212     0099                     	;# 
   213     009A                     	;# 
   214     009B                     	;# 
   215     009C                     	;# 
   216     009D                     	;# 
   217     009E                     	;# 
   218     009F                     	;# 
   219     0105                     	;# 
   220     0107                     	;# 
   221     0108                     	;# 
   222     0109                     	;# 
   223     010C                     	;# 
   224     010C                     	;# 
   225     010D                     	;# 
   226     010E                     	;# 
   227     010F                     	;# 
   228     0185                     	;# 
   229     0187                     	;# 
   230     0188                     	;# 
   231     0189                     	;# 
   232     018C                     	;# 
   233     018D                     	;# 
   234     0000                     	;# 
   235     0001                     	;# 
   236     0002                     	;# 
   237     0003                     	;# 
   238     0004                     	;# 
   239     0005                     	;# 
   240     0006                     	;# 
   241     0007                     	;# 
   242     0008                     	;# 
   243     0009                     	;# 
   244     000A                     	;# 
   245     000B                     	;# 
   246     000C                     	;# 
   247     000D                     	;# 
   248     000E                     	;# 
   249     000E                     	;# 
   250     000F                     	;# 
   251     0010                     	;# 
   252     0011                     	;# 
   253     0012                     	;# 
   254     0013                     	;# 
   255     0014                     	;# 
   256     0015                     	;# 
   257     0015                     	;# 
   258     0016                     	;# 
   259     0017                     	;# 
   260     0018                     	;# 
   261     0019                     	;# 
   262     001A                     	;# 
   263     001B                     	;# 
   264     001B                     	;# 
   265     001C                     	;# 
   266     001D                     	;# 
   267     001E                     	;# 
   268     001F                     	;# 
   269     0081                     	;# 
   270     0085                     	;# 
   271     0086                     	;# 
   272     0087                     	;# 
   273     0088                     	;# 
   274     0089                     	;# 
   275     008C                     	;# 
   276     008D                     	;# 
   277     008E                     	;# 
   278     008F                     	;# 
   279     0090                     	;# 
   280     0091                     	;# 
   281     0092                     	;# 
   282     0093                     	;# 
   283     0093                     	;# 
   284     0093                     	;# 
   285     0094                     	;# 
   286     0095                     	;# 
   287     0096                     	;# 
   288     0097                     	;# 
   289     0098                     	;# 
   290     0099                     	;# 
   291     009A                     	;# 
   292     009B                     	;# 
   293     009C                     	;# 
   294     009D                     	;# 
   295     009E                     	;# 
   296     009F                     	;# 
   297     0105                     	;# 
   298     0107                     	;# 
   299     0108                     	;# 
   300     0109                     	;# 
   301     010C                     	;# 
   302     010C                     	;# 
   303     010D                     	;# 
   304     010E                     	;# 
   305     010F                     	;# 
   306     0185                     	;# 
   307     0187                     	;# 
   308     0188                     	;# 
   309     0189                     	;# 
   310     018C                     	;# 
   311     018D                     	;# 
   312     0000                     	;# 
   313     0001                     	;# 
   314     0002                     	;# 
   315     0003                     	;# 
   316     0004                     	;# 
   317     0005                     	;# 
   318     0006                     	;# 
   319     0007                     	;# 
   320     0008                     	;# 
   321     0009                     	;# 
   322     000A                     	;# 
   323     000B                     	;# 
   324     000C                     	;# 
   325     000D                     	;# 
   326     000E                     	;# 
   327     000E                     	;# 
   328     000F                     	;# 
   329     0010                     	;# 
   330     0011                     	;# 
   331     0012                     	;# 
   332     0013                     	;# 
   333     0014                     	;# 
   334     0015                     	;# 
   335     0015                     	;# 
   336     0016                     	;# 
   337     0017                     	;# 
   338     0018                     	;# 
   339     0019                     	;# 
   340     001A                     	;# 
   341     001B                     	;# 
   342     001B                     	;# 
   343     001C                     	;# 
   344     001D                     	;# 
   345     001E                     	;# 
   346     001F                     	;# 
   347     0081                     	;# 
   348     0085                     	;# 
   349     0086                     	;# 
   350     0087                     	;# 
   351     0088                     	;# 
   352     0089                     	;# 
   353     008C                     	;# 
   354     008D                     	;# 
   355     008E                     	;# 
   356     008F                     	;# 
   357     0090                     	;# 
   358     0091                     	;# 
   359     0092                     	;# 
   360     0093                     	;# 
   361     0093                     	;# 
   362     0093                     	;# 
   363     0094                     	;# 
   364     0095                     	;# 
   365     0096                     	;# 
   366     0097                     	;# 
   367     0098                     	;# 
   368     0099                     	;# 
   369     009A                     	;# 
   370     009B                     	;# 
   371     009C                     	;# 
   372     009D                     	;# 
   373     009E                     	;# 
   374     009F                     	;# 
   375     0105                     	;# 
   376     0107                     	;# 
   377     0108                     	;# 
   378     0109                     	;# 
   379     010C                     	;# 
   380     010C                     	;# 
   381     010D                     	;# 
   382     010E                     	;# 
   383     010F                     	;# 
   384     0185                     	;# 
   385     0187                     	;# 
   386     0188                     	;# 
   387     0189                     	;# 
   388     018C                     	;# 
   389     018D                     	;# 
   390     0000                     	;# 
   391     0001                     	;# 
   392     0002                     	;# 
   393     0003                     	;# 
   394     0004                     	;# 
   395     0005                     	;# 
   396     0006                     	;# 
   397     0007                     	;# 
   398     0008                     	;# 
   399     0009                     	;# 
   400     000A                     	;# 
   401     000B                     	;# 
   402     000C                     	;# 
   403     000D                     	;# 
   404     000E                     	;# 
   405     000E                     	;# 
   406     000F                     	;# 
   407     0010                     	;# 
   408     0011                     	;# 
   409     0012                     	;# 
   410     0013                     	;# 
   411     0014                     	;# 
   412     0015                     	;# 
   413     0015                     	;# 
   414     0016                     	;# 
   415     0017                     	;# 
   416     0018                     	;# 
   417     0019                     	;# 
   418     001A                     	;# 
   419     001B                     	;# 
   420     001B                     	;# 
   421     001C                     	;# 
   422     001D                     	;# 
   423     001E                     	;# 
   424     001F                     	;# 
   425     0081                     	;# 
   426     0085                     	;# 
   427     0086                     	;# 
   428     0087                     	;# 
   429     0088                     	;# 
   430     0089                     	;# 
   431     008C                     	;# 
   432     008D                     	;# 
   433     008E                     	;# 
   434     008F                     	;# 
   435     0090                     	;# 
   436     0091                     	;# 
   437     0092                     	;# 
   438     0093                     	;# 
   439     0093                     	;# 
   440     0093                     	;# 
   441     0094                     	;# 
   442     0095                     	;# 
   443     0096                     	;# 
   444     0097                     	;# 
   445     0098                     	;# 
   446     0099                     	;# 
   447     009A                     	;# 
   448     009B                     	;# 
   449     009C                     	;# 
   450     009D                     	;# 
   451     009E                     	;# 
   452     009F                     	;# 
   453     0105                     	;# 
   454     0107                     	;# 
   455     0108                     	;# 
   456     0109                     	;# 
   457     010C                     	;# 
   458     010C                     	;# 
   459     010D                     	;# 
   460     010E                     	;# 
   461     010F                     	;# 
   462     0185                     	;# 
   463     0187                     	;# 
   464     0188                     	;# 
   465     0189                     	;# 
   466     018C                     	;# 
   467     018D                     	;# 
   468     0000                     	;# 
   469     0001                     	;# 
   470     0002                     	;# 
   471     0003                     	;# 
   472     0004                     	;# 
   473     0005                     	;# 
   474     0006                     	;# 
   475     0007                     	;# 
   476     0008                     	;# 
   477     0009                     	;# 
   478     000A                     	;# 
   479     000B                     	;# 
   480     000C                     	;# 
   481     000D                     	;# 
   482     000E                     	;# 
   483     000E                     	;# 
   484     000F                     	;# 
   485     0010                     	;# 
   486     0011                     	;# 
   487     0012                     	;# 
   488     0013                     	;# 
   489     0014                     	;# 
   490     0015                     	;# 
   491     0015                     	;# 
   492     0016                     	;# 
   493     0017                     	;# 
   494     0018                     	;# 
   495     0019                     	;# 
   496     001A                     	;# 
   497     001B                     	;# 
   498     001B                     	;# 
   499     001C                     	;# 
   500     001D                     	;# 
   501     001E                     	;# 
   502     001F                     	;# 
   503     0081                     	;# 
   504     0085                     	;# 
   505     0086                     	;# 
   506     0087                     	;# 
   507     0088                     	;# 
   508     0089                     	;# 
   509     008C                     	;# 
   510     008D                     	;# 
   511     008E                     	;# 
   512     008F                     	;# 
   513     0090                     	;# 
   514     0091                     	;# 
   515     0092                     	;# 
   516     0093                     	;# 
   517     0093                     	;# 
   518     0093                     	;# 
   519     0094                     	;# 
   520     0095                     	;# 
   521     0096                     	;# 
   522     0097                     	;# 
   523     0098                     	;# 
   524     0099                     	;# 
   525     009A                     	;# 
   526     009B                     	;# 
   527     009C                     	;# 
   528     009D                     	;# 
   529     009E                     	;# 
   530     009F                     	;# 
   531     0105                     	;# 
   532     0107                     	;# 
   533     0108                     	;# 
   534     0109                     	;# 
   535     010C                     	;# 
   536     010C                     	;# 
   537     010D                     	;# 
   538     010E                     	;# 
   539     010F                     	;# 
   540     0185                     	;# 
   541     0187                     	;# 
   542     0188                     	;# 
   543     0189                     	;# 
   544     018C                     	;# 
   545     018D                     	;# 
   546     0000                     	;# 
   547     0001                     	;# 
   548     0002                     	;# 
   549     0003                     	;# 
   550     0004                     	;# 
   551     0005                     	;# 
   552     0006                     	;# 
   553     0007                     	;# 
   554     0008                     	;# 
   555     0009                     	;# 
   556     000A                     	;# 
   557     000B                     	;# 
   558     000C                     	;# 
   559     000D                     	;# 
   560     000E                     	;# 
   561     000E                     	;# 
   562     000F                     	;# 
   563     0010                     	;# 
   564     0011                     	;# 
   565     0012                     	;# 
   566     0013                     	;# 
   567     0014                     	;# 
   568     0015                     	;# 
   569     0015                     	;# 
   570     0016                     	;# 
   571     0017                     	;# 
   572     0018                     	;# 
   573     0019                     	;# 
   574     001A                     	;# 
   575     001B                     	;# 
   576     001B                     	;# 
   577     001C                     	;# 
   578     001D                     	;# 
   579     001E                     	;# 
   580     001F                     	;# 
   581     0081                     	;# 
   582     0085                     	;# 
   583     0086                     	;# 
   584     0087                     	;# 
   585     0088                     	;# 
   586     0089                     	;# 
   587     008C                     	;# 
   588     008D                     	;# 
   589     008E                     	;# 
   590     008F                     	;# 
   591     0090                     	;# 
   592     0091                     	;# 
   593     0092                     	;# 
   594     0093                     	;# 
   595     0093                     	;# 
   596     0093                     	;# 
   597     0094                     	;# 
   598     0095                     	;# 
   599     0096                     	;# 
   600     0097                     	;# 
   601     0098                     	;# 
   602     0099                     	;# 
   603     009A                     	;# 
   604     009B                     	;# 
   605     009C                     	;# 
   606     009D                     	;# 
   607     009E                     	;# 
   608     009F                     	;# 
   609     0105                     	;# 
   610     0107                     	;# 
   611     0108                     	;# 
   612     0109                     	;# 
   613     010C                     	;# 
   614     010C                     	;# 
   615     010D                     	;# 
   616     010E                     	;# 
   617     010F                     	;# 
   618     0185                     	;# 
   619     0187                     	;# 
   620     0188                     	;# 
   621     0189                     	;# 
   622     018C                     	;# 
   623     018D                     	;# 
   624     0008                     _PORTDbits	set	8
   625     0013                     _SSPBUF	set	19
   626     0014                     _SSPCON	set	20
   627     0006                     _PORTB	set	6
   628     0008                     _PORTD	set	8
   629     0006                     _PORTBbits	set	6
   630     0043                     _RD3	set	67
   631     0047                     _RD7	set	71
   632     0046                     _RD6	set	70
   633     0045                     _RD5	set	69
   634     0044                     _RD4	set	68
   635     008F                     _OSCCONbits	set	143
   636     0091                     _SSPCON2bits	set	145
   637     0087                     _TRISCbits	set	135
   638     0094                     _SSPSTAT	set	148
   639     0093                     _SSPADD	set	147
   640     0091                     _SSPCON2	set	145
   641     0081                     _OPTION_REGbits	set	129
   642     0095                     _WPUB	set	149
   643     0086                     _TRISB	set	134
   644     0088                     _TRISD	set	136
   645     0189                     _ANSELH	set	393
   646     0188                     _ANSEL	set	392
   647                           
   648                           	psect	strings
   649     0003                     __pstrings:
   650     0003                     stringtab:
   651     0003                     __stringtab:
   652     0003                     stringcode:	
   653                           ;	String table - string pointers are 1 byte each
   654                           
   655     0003                     stringdir:
   656     0003  3000               	movlw	high stringdir
   657     0004  008A               	movwf	10
   658     0005  0804               	movf	4,w
   659     0006  0A84               	incf	4,f
   660     0007  0782               	addwf	2,f
   661     0008                     __stringbase:
   662     0008  3400               	retlw	0
   663     0009                     __end_of__stringtab:
   664     0009                     STR_2:
   665     0009  3454               	retlw	84	;'T'
   666     000A  343A               	retlw	58	;':'
   667     000B  3420               	retlw	32	;' '
   668     000C  3420               	retlw	32	;' '
   669     000D  3420               	retlw	32	;' '
   670     000E  3420               	retlw	32	;' '
   671     000F  3443               	retlw	67	;'C'
   672     0010  3400               	retlw	0
   673     0011                     STR_1:
   674     0011  3453               	retlw	83	;'S'
   675     0012  343A               	retlw	58	;':'
   676     0013  3420               	retlw	32	;' '
   677     0014  3420               	retlw	32	;' '
   678     0015  343A               	retlw	58	;':'
   679     0016  3400               	retlw	0
   680                           
   681                           	psect	cinit
   682     07F5                     start_initialization:	
   683                           ; #config settings
   684                           
   685     07F5                     __initialization:
   686                           
   687                           ; Clear objects allocated to BANK0
   688     07F5  1383               	bcf	3,7	;select IRP bank0
   689     07F6  3020               	movlw	low __pbssBANK0
   690     07F7  0084               	movwf	4
   691     07F8  3033               	movlw	low (__pbssBANK0+19)
   692     07F9  120A  118A  2174   	fcall	clear_ram0
   693     07FC                     end_of_initialization:	
   694                           ;End of C runtime variable initialization code
   695                           
   696     07FC                     __end_of__initialization:
   697     07FC  0183               	clrf	3
   698     07FD  120A  118A  2DEE   	ljmp	_main	;jump to C main() function
   699                           
   700                           	psect	bssBANK0
   701     0020                     __pbssBANK0:
   702     0020                     _conver:
   703     0020                     	ds	4
   704     0024                     _buffer:
   705     0024                     	ds	3
   706     0027                     _valADC:
   707     0027                     	ds	3
   708     002A                     _SERVO:
   709     002A                     	ds	1
   710     002B                     _modo:
   711     002B                     	ds	1
   712     002C                     _minutos:
   713     002C                     	ds	1
   714     002D                     _min:
   715     002D                     	ds	1
   716     002E                     _segundos:
   717     002E                     	ds	1
   718     002F                     _sec:
   719     002F                     	ds	1
   720     0030                     _tempint:
   721     0030                     	ds	1
   722     0031                     _decena:
   723     0031                     	ds	1
   724     0032                     _unidad:
   725     0032                     	ds	1
   726                           
   727                           	psect	clrtext
   728     0174                     clear_ram0:	
   729                           ;	Called with FSR containing the base address, and
   730                           ;	W with the last address+1
   731                           
   732     0174  0064               	clrwdt	;clear the watchdog before getting into this loop
   733     0175                     clrloop0:
   734     0175  0180               	clrf	0	;clear RAM location pointed to by FSR
   735     0176  0A84               	incf	4,f	;increment pointer
   736     0177  0604               	xorwf	4,w	;XOR with final address
   737     0178  1903               	btfsc	3,2	;have we reached the end yet?
   738     0179  3400               	retlw	0	;all done for this memory range, return
   739     017A  0604               	xorwf	4,w	;XOR again to restore value
   740     017B  2975               	goto	clrloop0	;do the next byte
   741                           
   742                           	psect	cstackCOMMON
   743     0070                     __pcstackCOMMON:
   744     0070                     ?_setupINTOSC:
   745     0070                     ??_setupINTOSC:	
   746                           ; 1 bytes @ 0x0
   747                           
   748     0070                     ?_portsetup:	
   749                           ; 1 bytes @ 0x0
   750                           
   751     0070                     ?_Lcd_Init:	
   752                           ; 1 bytes @ 0x0
   753                           
   754     0070                     ?_Lcd_Clear:	
   755                           ; 1 bytes @ 0x0
   756                           
   757     0070                     ?_Lcd_Write_Char:	
   758                           ; 1 bytes @ 0x0
   759                           
   760     0070                     ?_Lcd_Write_String:	
   761                           ; 1 bytes @ 0x0
   762                           
   763     0070                     ?_leer_temperatura:	
   764                           ; 1 bytes @ 0x0
   765                           
   766     0070                     ?_leer_x:	
   767                           ; 1 bytes @ 0x0
   768                           
   769     0070                     ?_envio_ESP:	
   770                           ; 1 bytes @ 0x0
   771                           
   772     0070                     ?_I2C_Master_Start:	
   773                           ; 1 bytes @ 0x0
   774                           
   775     0070                     ??_I2C_Master_Start:	
   776                           ; 1 bytes @ 0x0
   777                           
   778     0070                     ?_I2C_Master_Write:	
   779                           ; 1 bytes @ 0x0
   780                           
   781     0070                     ?_I2C_Master_Stop:	
   782                           ; 1 bytes @ 0x0
   783                           
   784     0070                     ??_I2C_Master_Stop:	
   785                           ; 1 bytes @ 0x0
   786                           
   787     0070                     ?_inttochar:	
   788                           ; 1 bytes @ 0x0
   789                           
   790     0070                     ??_inttochar:	
   791                           ; 1 bytes @ 0x0
   792                           
   793     0070                     ?_I2C_Master_RepeatedStart:	
   794                           ; 1 bytes @ 0x0
   795                           
   796     0070                     ??_I2C_Master_RepeatedStart:	
   797                           ; 1 bytes @ 0x0
   798                           
   799     0070                     ?_main:	
   800                           ; 1 bytes @ 0x0
   801                           
   802     0070                     ?_convertir:	
   803                           ; 1 bytes @ 0x0
   804                           
   805     0070                     ?_I2C_Master_Wait:	
   806                           ; 1 bytes @ 0x0
   807                           
   808     0070                     ??_I2C_Master_Wait:	
   809                           ; 1 bytes @ 0x0
   810                           
   811     0070                     ?_Lcd_Port:	
   812                           ; 1 bytes @ 0x0
   813                           
   814     0070                     ??_Lcd_Port:	
   815                           ; 1 bytes @ 0x0
   816                           
   817     0070                     ?_Lcd_Cmd:	
   818                           ; 1 bytes @ 0x0
   819                           
   820     0070                     ?___bmul:	
   821                           ; 1 bytes @ 0x0
   822                           
   823     0070                     ?___lbdiv:	
   824                           ; 1 bytes @ 0x0
   825                           
   826     0070                     ?___lbmod:	
   827                           ; 1 bytes @ 0x0
   828                           
   829     0070                     ?_I2C_Master_Read:	
   830                           ; 1 bytes @ 0x0
   831                           
   832     0070                     ?___lldiv:	
   833                           ; 2 bytes @ 0x0
   834                           
   835     0070                     Lcd_Port@a:	
   836                           ; 4 bytes @ 0x0
   837                           
   838     0070                     inttochar@num:	
   839                           ; 1 bytes @ 0x0
   840                           
   841     0070                     setupINTOSC@IRCF:	
   842                           ; 1 bytes @ 0x0
   843                           
   844     0070                     ___bmul@multiplicand:	
   845                           ; 1 bytes @ 0x0
   846                           
   847     0070                     ___lbdiv@divisor:	
   848                           ; 1 bytes @ 0x0
   849                           
   850     0070                     ___lbmod@divisor:	
   851                           ; 1 bytes @ 0x0
   852                           
   853     0070                     I2C_Master_Write@d:	
   854                           ; 1 bytes @ 0x0
   855                           
   856     0070                     I2C_Master_Read@a:	
   857                           ; 2 bytes @ 0x0
   858                           
   859     0070                     ___lldiv@divisor:	
   860                           ; 2 bytes @ 0x0
   861                           
   862                           
   863                           ; 4 bytes @ 0x0
   864     0070                     	ds	1
   865     0071                     ??_Lcd_Write_Char:
   866     0071                     ??_Lcd_Cmd:	
   867                           ; 1 bytes @ 0x1
   868                           
   869     0071                     ??___bmul:	
   870                           ; 1 bytes @ 0x1
   871                           
   872     0071                     ??___lbdiv:	
   873                           ; 1 bytes @ 0x1
   874                           
   875     0071                     ??___lbmod:	
   876                           ; 1 bytes @ 0x1
   877                           
   878                           
   879                           ; 1 bytes @ 0x1
   880     0071                     	ds	1
   881     0072                     ?_enviar_x:
   882     0072                     ??_envio_ESP:	
   883                           ; 1 bytes @ 0x2
   884                           
   885     0072                     ??_I2C_Master_Write:	
   886                           ; 1 bytes @ 0x2
   887                           
   888     0072                     ??_I2C_Master_Read:	
   889                           ; 1 bytes @ 0x2
   890                           
   891     0072                     enviar_x@val2:	
   892                           ; 1 bytes @ 0x2
   893                           
   894     0072                     Lcd_Write_Char@temp:	
   895                           ; 1 bytes @ 0x2
   896                           
   897     0072                     ___bmul@product:	
   898                           ; 1 bytes @ 0x2
   899                           
   900     0072                     ___lbdiv@dividend:	
   901                           ; 1 bytes @ 0x2
   902                           
   903                           
   904                           ; 1 bytes @ 0x2
   905     0072                     	ds	1
   906     0073                     ??_enviar_x:
   907     0073                     Lcd_Cmd@a:	
   908                           ; 1 bytes @ 0x3
   909                           
   910     0073                     Lcd_Write_Char@y:	
   911                           ; 1 bytes @ 0x3
   912                           
   913     0073                     ___bmul@multiplier:	
   914                           ; 1 bytes @ 0x3
   915                           
   916     0073                     ___lbdiv@counter:	
   917                           ; 1 bytes @ 0x3
   918                           
   919     0073                     ___lbmod@dividend:	
   920                           ; 1 bytes @ 0x3
   921                           
   922                           
   923                           ; 1 bytes @ 0x3
   924     0073                     	ds	1
   925     0074                     ??_Lcd_Init:
   926     0074                     ??_Lcd_Clear:	
   927                           ; 1 bytes @ 0x4
   928                           
   929     0074                     ?_Lcd_Set_Cursor:	
   930                           ; 1 bytes @ 0x4
   931                           
   932     0074                     ??_convertir:	
   933                           ; 1 bytes @ 0x4
   934                           
   935     0074                     Lcd_Set_Cursor@b:	
   936                           ; 1 bytes @ 0x4
   937                           
   938     0074                     Lcd_Write_Char@a:	
   939                           ; 1 bytes @ 0x4
   940                           
   941     0074                     ___lbdiv@quotient:	
   942                           ; 1 bytes @ 0x4
   943                           
   944     0074                     ___lbmod@counter:	
   945                           ; 1 bytes @ 0x4
   946                           
   947     0074                     I2C_Master_Read@temp:	
   948                           ; 1 bytes @ 0x4
   949                           
   950     0074                     ___lldiv@dividend:	
   951                           ; 2 bytes @ 0x4
   952                           
   953                           
   954                           ; 4 bytes @ 0x4
   955     0074                     	ds	1
   956     0075                     ??_Lcd_Set_Cursor:
   957     0075                     ??_Lcd_Write_String:	
   958                           ; 1 bytes @ 0x5
   959                           
   960     0075                     convertir@unidad:	
   961                           ; 1 bytes @ 0x5
   962                           
   963     0075                     enviar_x@val1:	
   964                           ; 1 bytes @ 0x5
   965                           
   966     0075                     ___lbmod@rem:	
   967                           ; 1 bytes @ 0x5
   968                           
   969     0075                     Lcd_Write_String@i:	
   970                           ; 1 bytes @ 0x5
   971                           
   972                           
   973                           ; 2 bytes @ 0x5
   974     0075                     	ds	1
   975     0076                     ?_descomponer:
   976     0076                     convertir@decena:	
   977                           ; 1 bytes @ 0x6
   978                           
   979     0076                     Lcd_Set_Cursor@a:	
   980                           ; 1 bytes @ 0x6
   981                           
   982     0076                     descomponer@pos:	
   983                           ; 1 bytes @ 0x6
   984                           
   985                           
   986                           ; 2 bytes @ 0x6
   987     0076                     	ds	1
   988     0077                     convertir@conversion:
   989     0077                     Lcd_Set_Cursor@z:	
   990                           ; 1 bytes @ 0x7
   991                           
   992     0077                     Lcd_Write_String@a:	
   993                           ; 1 bytes @ 0x7
   994                           
   995                           
   996                           ; 1 bytes @ 0x7
   997     0077                     	ds	1
   998     0078                     ??___lldiv:
   999     0078                     convertir@valor:	
  1000                           ; 1 bytes @ 0x8
  1001                           
  1002     0078                     Lcd_Set_Cursor@y:	
  1003                           ; 1 bytes @ 0x8
  1004                           
  1005     0078                     descomponer@num:	
  1006                           ; 1 bytes @ 0x8
  1007                           
  1008                           
  1009                           ; 1 bytes @ 0x8
  1010     0078                     	ds	1
  1011     0079                     ??_leer_x:
  1012     0079                     ??_descomponer:	
  1013                           ; 1 bytes @ 0x9
  1014                           
  1015     0079                     Lcd_Set_Cursor@temp:	
  1016                           ; 1 bytes @ 0x9
  1017                           
  1018     0079                     descomponer@cent:	
  1019                           ; 1 bytes @ 0x9
  1020                           
  1021     0079                     ___lldiv@quotient:	
  1022                           ; 1 bytes @ 0x9
  1023                           
  1024                           
  1025                           ; 4 bytes @ 0x9
  1026     0079                     	ds	1
  1027     007A                     descomponer@uni:
  1028                           
  1029                           ; 1 bytes @ 0xA
  1030     007A                     	ds	1
  1031     007B                     leer_x@address:
  1032     007B                     descomponer@dec:	
  1033                           ; 1 bytes @ 0xB
  1034                           
  1035                           
  1036                           ; 1 bytes @ 0xB
  1037     007B                     	ds	1
  1038     007C                     ?_Escribir_dato:
  1039     007C                     Escribir_dato@posx:	
  1040                           ; 1 bytes @ 0xC
  1041                           
  1042     007C                     leer_x@valor:	
  1043                           ; 1 bytes @ 0xC
  1044                           
  1045                           
  1046                           ; 1 bytes @ 0xC
  1047     007C                     	ds	1
  1048     007D                     Escribir_dato@posy:
  1049     007D                     ___lldiv@counter:	
  1050                           ; 1 bytes @ 0xD
  1051                           
  1052                           
  1053                           ; 1 bytes @ 0xD
  1054     007D                     	ds	1
  1055     007E                     ??_leer_temperatura:
  1056     007E                     ??_Escribir_dato:	
  1057                           ; 1 bytes @ 0xE
  1058                           
  1059                           
  1060                           	psect	cstackBANK0
  1061     0033                     __pcstackBANK0:	
  1062                           ; 1 bytes @ 0xE
  1063                           
  1064     0033                     ?_I2C_Master_Init:
  1065     0033                     Escribir_dato@dato:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068     0033                     I2C_Master_Init@c:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071                           
  1072                           ; 4 bytes @ 0x0
  1073     0033                     	ds	4
  1074     0037                     ??_I2C_Master_Init:
  1075                           
  1076                           ; 1 bytes @ 0x4
  1077     0037                     	ds	4
  1078     003B                     ??_portsetup:
  1079                           
  1080                           ; 1 bytes @ 0x8
  1081     003B                     	ds	3
  1082     003E                     ??_main:
  1083                           
  1084                           ; 1 bytes @ 0xB
  1085     003E                     	ds	3
  1086     0041                     _main$202:
  1087                           
  1088                           ; 1 bytes @ 0xE
  1089     0041                     	ds	1
  1090                           
  1091                           	psect	maintext
  1092     05EE                     __pmaintext:	
  1093 ;;
  1094 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1095 ;;
  1096 ;; *************** function _main *****************
  1097 ;; Defined at:
  1098 ;;		line 70 in file "main.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : B00/0
  1109 ;;		On exit  : 300/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1112 ;;      Params:         0       0       0       0       0
  1113 ;;      Locals:         0       1       0       0       0
  1114 ;;      Temps:          0       3       0       0       0
  1115 ;;      Totals:         0       4       0       0       0
  1116 ;;Total ram usage:        4 bytes
  1117 ;; Hardware stack levels required when called: 5
  1118 ;; This function calls:
  1119 ;;		_Escribir_dato
  1120 ;;		_I2C_Master_Start
  1121 ;;		_I2C_Master_Stop
  1122 ;;		_I2C_Master_Write
  1123 ;;		_Lcd_Clear
  1124 ;;		_Lcd_Init
  1125 ;;		_Lcd_Set_Cursor
  1126 ;;		_Lcd_Write_Char
  1127 ;;		_Lcd_Write_String
  1128 ;;		_enviar_x
  1129 ;;		_envio_ESP
  1130 ;;		_leer_temperatura
  1131 ;;		_leer_x
  1132 ;;		_portsetup
  1133 ;;		_setupINTOSC
  1134 ;; This function is called by:
  1135 ;;		Startup code after reset
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139     05EE                     _main:	
  1140                           ;psect for function _main
  1141                           
  1142                           
  1143                           ;main.c: 72:     setupINTOSC(7);
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1147     05EE  3007               	movlw	7
  1148     05EF  120A  118A  2446  120A  118A  	fcall	_setupINTOSC
  1149                           
  1150                           ;main.c: 74:     portsetup();
  1151     05F4  120A  118A  2299  120A  118A  	fcall	_portsetup
  1152                           
  1153                           ;main.c: 77:     Lcd_Init();
  1154     05F9  120A  118A  24D3  120A  118A  	fcall	_Lcd_Init
  1155                           
  1156                           ;main.c: 78:     Lcd_Clear();
  1157     05FE  120A  118A  2185  120A  118A  	fcall	_Lcd_Clear
  1158                           
  1159                           ;main.c: 79:     Lcd_Set_Cursor(1,13);
  1160     0603  300D               	movlw	13
  1161     0604  00F4               	movwf	Lcd_Set_Cursor@b
  1162     0605  3001               	movlw	1
  1163     0606  120A  118A  23C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1164                           
  1165                           ;main.c: 80:     Lcd_Write_Char(':');
  1166     060B  303A               	movlw	58
  1167     060C  120A  118A  22C6  120A  118A  	fcall	_Lcd_Write_Char
  1168                           
  1169                           ;main.c: 81:     Lcd_Set_Cursor(2,9);
  1170     0611  3009               	movlw	9
  1171     0612  00F4               	movwf	Lcd_Set_Cursor@b
  1172     0613  3002               	movlw	2
  1173     0614  120A  118A  23C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1174                           
  1175                           ;main.c: 82:     Lcd_Write_String("S:  :");
  1176     0619  3009               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1177     061A  120A  118A  222A  120A  118A  	fcall	_Lcd_Write_String
  1178                           
  1179                           ;main.c: 83:     Lcd_Set_Cursor(2,1);
  1180     061F  01F4               	clrf	Lcd_Set_Cursor@b
  1181     0620  0AF4               	incf	Lcd_Set_Cursor@b,f
  1182     0621  3002               	movlw	2
  1183     0622  120A  118A  23C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1184                           
  1185                           ;main.c: 84:     Lcd_Write_String("T:    C");
  1186     0627  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1187     0628  120A  118A  222A  120A  118A  	fcall	_Lcd_Write_String
  1188                           
  1189                           ;main.c: 87:     modo = 0;
  1190     062D  1283               	bcf	3,5	;RP0=0, select bank0
  1191     062E  1303               	bcf	3,6	;RP1=0, select bank0
  1192     062F  01AB               	clrf	_modo
  1193                           
  1194                           ;main.c: 88:     sec = 0;
  1195     0630  01AF               	clrf	_sec
  1196                           
  1197                           ;main.c: 89:     min = 0;
  1198     0631  01AD               	clrf	_min
  1199                           
  1200                           ;main.c: 91:     enviar_x(0, 0);
  1201     0632  01F2               	clrf	enviar_x@val2
  1202     0633  3000               	movlw	0
  1203     0634  120A  118A  2328  120A  118A  	fcall	_enviar_x
  1204     0639                     l1776:
  1205                           
  1206                           ;main.c: 95:         leer_temperatura();
  1207     0639  120A  118A  2271  120A  118A  	fcall	_leer_temperatura
  1208                           
  1209                           ;main.c: 97:         enviar_x(0, 0);
  1210     063E  01F2               	clrf	enviar_x@val2
  1211     063F  3000               	movlw	0
  1212     0640  120A  118A  2328  120A  118A  	fcall	_enviar_x
  1213                           
  1214                           ;main.c: 99:         sec = leer_x(0x00);
  1215     0645  3000               	movlw	0
  1216     0646  120A  118A  2407  120A  118A  	fcall	_leer_x
  1217     064B  1283               	bcf	3,5	;RP0=0, select bank0
  1218     064C  00AF               	movwf	_sec
  1219                           
  1220                           ;main.c: 100:         Escribir_dato(sec, 14, 1);
  1221     064D  300E               	movlw	14
  1222     064E  00FC               	movwf	Escribir_dato@posx
  1223     064F  01FD               	clrf	Escribir_dato@posy
  1224     0650  0AFD               	incf	Escribir_dato@posy,f
  1225     0651  082F               	movf	_sec,w
  1226     0652  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1227                           
  1228                           ;main.c: 102:         min = leer_x(0x01);
  1229     0657  3001               	movlw	1
  1230     0658  120A  118A  2407  120A  118A  	fcall	_leer_x
  1231     065D  1283               	bcf	3,5	;RP0=0, select bank0
  1232     065E  00AD               	movwf	_min
  1233                           
  1234                           ;main.c: 103:         Escribir_dato(min, 11, 1);
  1235     065F  300B               	movlw	11
  1236     0660  00FC               	movwf	Escribir_dato@posx
  1237     0661  01FD               	clrf	Escribir_dato@posy
  1238     0662  0AFD               	incf	Escribir_dato@posy,f
  1239     0663  082D               	movf	_min,w
  1240     0664  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1241                           
  1242                           ;main.c: 104:         envio_ESP();
  1243     0669  120A  118A  258C  120A  118A  	fcall	_envio_ESP
  1244                           
  1245                           ;main.c: 107:         if (!PORTBbits.RB1){
  1246     066E  1283               	bcf	3,5	;RP0=0, select bank0
  1247     066F  1303               	bcf	3,6	;RP1=0, select bank0
  1248     0670  1886               	btfsc	6,1	;volatile
  1249     0671  2EA8               	goto	l1810
  1250                           
  1251                           ;main.c: 108:             if (SERVO != 0){
  1252     0672  082A               	movf	_SERVO,w
  1253     0673  1903               	btfsc	3,2
  1254     0674  2E87               	goto	l1804
  1255                           
  1256                           ;main.c: 109:                 SERVO = 0;
  1257     0675  01AA               	clrf	_SERVO
  1258                           
  1259                           ;main.c: 110:                 I2C_Master_Start();
  1260     0676  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  1261                           
  1262                           ;main.c: 111:                 I2C_Master_Write(0xb0);
  1263     067B  30B0               	movlw	176
  1264     067C  00F0               	movwf	I2C_Master_Write@d
  1265     067D  3000               	movlw	0
  1266     067E  00F1               	movwf	I2C_Master_Write@d+1
  1267     067F  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1268                           
  1269                           ;main.c: 112:                 I2C_Master_Write(0);
  1270     0684  3000               	movlw	0
  1271     0685  00F0               	movwf	I2C_Master_Write@d
  1272     0686  2E9D               	goto	L1
  1273     0687                     l1804:	
  1274                           ;main.c: 114:             }
  1275                           
  1276                           ;main.c: 113:                 I2C_Master_Stop();
  1277                           
  1278     0687  082A               	movf	_SERVO,w
  1279     0688  1D03               	btfss	3,2
  1280     0689  2EA8               	goto	l1810
  1281                           
  1282                           ;main.c: 116:                 SERVO = 1;
  1283     068A  01AA               	clrf	_SERVO
  1284     068B  0AAA               	incf	_SERVO,f
  1285                           
  1286                           ;main.c: 117:                 I2C_Master_Start();
  1287     068C  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  1288                           
  1289                           ;main.c: 118:                 I2C_Master_Write(0xb0);
  1290     0691  30B0               	movlw	176
  1291     0692  00F0               	movwf	I2C_Master_Write@d
  1292     0693  3000               	movlw	0
  1293     0694  00F1               	movwf	I2C_Master_Write@d+1
  1294     0695  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1295                           
  1296                           ;main.c: 119:                 I2C_Master_Write(1);
  1297     069A  3001               	movlw	1
  1298     069B  00F0               	movwf	I2C_Master_Write@d
  1299     069C  3000               	movlw	0
  1300     069D                     L1:
  1301     069D  00F1               	movwf	I2C_Master_Write@d+1
  1302     069E  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1303                           
  1304                           ;main.c: 120:                 I2C_Master_Stop();
  1305     06A3  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  1306     06A8                     l1810:
  1307                           
  1308                           ;main.c: 125:         if(!PORTBbits.RB4){
  1309     06A8  1283               	bcf	3,5	;RP0=0, select bank0
  1310     06A9  1E06               	btfss	6,4	;volatile
  1311     06AA  2F0D               	goto	l1860
  1312     06AB  2E39               	goto	l1776
  1313     06AC                     l1814:
  1314                           
  1315                           ;main.c: 129:                 leer_temperatura();
  1316     06AC  120A  118A  2271  120A  118A  	fcall	_leer_temperatura
  1317                           
  1318                           ;main.c: 130:                 envio_ESP();
  1319     06B1  120A  118A  258C  120A  118A  	fcall	_envio_ESP
  1320                           
  1321                           ;main.c: 131:                 Escribir_dato(sec, 14, 1);
  1322     06B6  300E               	movlw	14
  1323     06B7  00FC               	movwf	Escribir_dato@posx
  1324     06B8  01FD               	clrf	Escribir_dato@posy
  1325     06B9  0AFD               	incf	Escribir_dato@posy,f
  1326     06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1327     06BB  1303               	bcf	3,6	;RP1=0, select bank0
  1328     06BC  082F               	movf	_sec,w
  1329     06BD  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1330                           
  1331                           ;main.c: 132:                 Escribir_dato(min, 11, 1);
  1332     06C2  300B               	movlw	11
  1333     06C3  00FC               	movwf	Escribir_dato@posx
  1334     06C4  01FD               	clrf	Escribir_dato@posy
  1335     06C5  0AFD               	incf	Escribir_dato@posy,f
  1336     06C6  082D               	movf	_min,w
  1337     06C7  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1338                           
  1339                           ;main.c: 134:                 if(PORTBbits.RB7 == 0){
  1340     06CC  1B86               	btfsc	6,7	;volatile
  1341     06CD  2ED7               	goto	l1824
  1342                           
  1343                           ;main.c: 136:                     if (modo < 1){
  1344     06CE  082B               	movf	_modo,w
  1345     06CF  1D03               	btfss	3,2
  1346     06D0  2ED6               	goto	l1822
  1347                           
  1348                           ;main.c: 137:                         modo += 1;
  1349     06D1  3001               	movlw	1
  1350     06D2  00BE               	movwf	??_main
  1351     06D3  083E               	movf	??_main,w
  1352     06D4  07AB               	addwf	_modo,f
  1353                           
  1354                           ;main.c: 138:                     }
  1355     06D5  2ED7               	goto	l1824
  1356     06D6                     l1822:
  1357                           
  1358                           ;main.c: 140:                         modo = 0;
  1359     06D6  01AB               	clrf	_modo
  1360     06D7                     l1824:
  1361                           
  1362                           ;main.c: 144:                 if(!PORTBbits.RB6){
  1363     06D7  1B06               	btfsc	6,6	;volatile
  1364     06D8  2EF4               	goto	l1842
  1365                           
  1366                           ;main.c: 146:                     if (modo == 0){
  1367     06D9  082B               	movf	_modo,w
  1368     06DA  1D03               	btfss	3,2
  1369     06DB  2EE7               	goto	l1834
  1370                           
  1371                           ;main.c: 147:                         if (sec<59){
  1372     06DC  303B               	movlw	59
  1373     06DD  022F               	subwf	_sec,w
  1374     06DE  1803               	skipnc
  1375     06DF  2EE5               	goto	l1832
  1376                           
  1377                           ;main.c: 148:                             sec ++;
  1378     06E0  3001               	movlw	1
  1379     06E1  00BE               	movwf	??_main
  1380     06E2  083E               	movf	??_main,w
  1381     06E3  07AF               	addwf	_sec,f
  1382                           
  1383                           ;main.c: 149:                         }
  1384     06E4  2EF4               	goto	l1842
  1385     06E5                     l1832:
  1386                           
  1387                           ;main.c: 151:                             sec = 0;
  1388     06E5  01AF               	clrf	_sec
  1389     06E6  2EF4               	goto	l1842
  1390     06E7                     l1834:
  1391     06E7  032B               	decf	_modo,w
  1392     06E8  1D03               	btfss	3,2
  1393     06E9  2EF4               	goto	l1842
  1394                           
  1395                           ;main.c: 155:                         if (min<59){
  1396     06EA  303B               	movlw	59
  1397     06EB  022D               	subwf	_min,w
  1398     06EC  1803               	skipnc
  1399     06ED  2EF3               	goto	l1840
  1400                           
  1401                           ;main.c: 156:                             min++;
  1402     06EE  3001               	movlw	1
  1403     06EF  00BE               	movwf	??_main
  1404     06F0  083E               	movf	??_main,w
  1405     06F1  07AD               	addwf	_min,f
  1406                           
  1407                           ;main.c: 157:                         }
  1408     06F2  2EF4               	goto	l1842
  1409     06F3                     l1840:
  1410                           
  1411                           ;main.c: 159:                             min = 0;
  1412     06F3  01AD               	clrf	_min
  1413     06F4                     l1842:
  1414                           
  1415                           ;main.c: 166:                 if(!PORTBbits.RB5){
  1416     06F4  1A86               	btfsc	6,5	;volatile
  1417     06F5  2F0D               	goto	l1860
  1418                           
  1419                           ;main.c: 169:                     if (modo == 0){
  1420     06F6  082B               	movf	_modo,w
  1421     06F7  1D03               	btfss	3,2
  1422     06F8  2F02               	goto	l1852
  1423                           
  1424                           ;main.c: 170:                         if (sec > 0){
  1425     06F9  082F               	movf	_sec,w
  1426     06FA  1903               	btfsc	3,2
  1427     06FB  2EFF               	goto	l1850
  1428                           
  1429                           ;main.c: 171:                             sec--;
  1430     06FC  3001               	movlw	1
  1431     06FD  02AF               	subwf	_sec,f
  1432                           
  1433                           ;main.c: 172:                         }
  1434     06FE  2F0D               	goto	l1860
  1435     06FF                     l1850:
  1436                           
  1437                           ;main.c: 174:                             sec = 59;
  1438     06FF  303B               	movlw	59
  1439     0700  00AF               	movwf	_sec
  1440     0701  2F0D               	goto	l1860
  1441     0702                     l1852:
  1442     0702  032B               	decf	_modo,w
  1443     0703  1D03               	btfss	3,2
  1444     0704  2F0D               	goto	l1860
  1445                           
  1446                           ;main.c: 178:                         if (min > 0){
  1447     0705  082D               	movf	_min,w
  1448     0706  1903               	btfsc	3,2
  1449     0707  2F0B               	goto	l1858
  1450                           
  1451                           ;main.c: 179:                             min--;
  1452     0708  3001               	movlw	1
  1453     0709  02AD               	subwf	_min,f
  1454                           
  1455                           ;main.c: 180:                         }
  1456     070A  2F0D               	goto	l1860
  1457     070B                     l1858:
  1458                           
  1459                           ;main.c: 182:                             min = 59;
  1460     070B  303B               	movlw	59
  1461     070C  00AD               	movwf	_min
  1462     070D                     l1860:
  1463                           
  1464                           ;main.c: 127:             while(PORTBbits.RB3){
  1465     070D  1986               	btfsc	6,3	;volatile
  1466     070E  2EAC               	goto	l1814
  1467                           
  1468                           ;main.c: 189:             enviar_x(0,0);
  1469     070F  01F2               	clrf	enviar_x@val2
  1470     0710  3000               	movlw	0
  1471     0711  120A  118A  2328  120A  118A  	fcall	_enviar_x
  1472                           
  1473                           ;main.c: 191:             Escribir_dato(sec, 14, 2);
  1474     0716  300E               	movlw	14
  1475     0717  00FC               	movwf	Escribir_dato@posx
  1476     0718  3002               	movlw	2
  1477     0719  00FD               	movwf	Escribir_dato@posy
  1478     071A  1283               	bcf	3,5	;RP0=0, select bank0
  1479     071B  082F               	movf	_sec,w
  1480     071C  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1481                           
  1482                           ;main.c: 192:             Escribir_dato(min, 11, 2);
  1483     0721  300B               	movlw	11
  1484     0722  00FC               	movwf	Escribir_dato@posx
  1485     0723  3002               	movlw	2
  1486     0724  00FD               	movwf	Escribir_dato@posy
  1487     0725  082D               	movf	_min,w
  1488     0726  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1489                           
  1490                           ;main.c: 195:             I2C_Master_Start();
  1491     072B  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  1492                           
  1493                           ;main.c: 196:             I2C_Master_Write(0xb0);
  1494     0730  30B0               	movlw	176
  1495     0731  00F0               	movwf	I2C_Master_Write@d
  1496     0732  3000               	movlw	0
  1497     0733  00F1               	movwf	I2C_Master_Write@d+1
  1498     0734  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1499                           
  1500                           ;main.c: 197:             I2C_Master_Write(0);
  1501     0739  3000               	movlw	0
  1502     073A  00F0               	movwf	I2C_Master_Write@d
  1503     073B  00F1               	movwf	I2C_Master_Write@d+1
  1504     073C  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1505                           
  1506                           ;main.c: 198:             I2C_Master_Stop();
  1507     0741  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  1508                           
  1509                           ;main.c: 199:             SERVO = 0;
  1510     0746  1283               	bcf	3,5	;RP0=0, select bank0
  1511     0747  01AA               	clrf	_SERVO
  1512                           
  1513                           ;main.c: 201:             _delay((unsigned long)((400)*(8000000/4000.0)));
  1514     0748  3005               	movlw	5
  1515     0749  1283               	bcf	3,5	;RP0=0, select bank0
  1516     074A  1303               	bcf	3,6	;RP1=0, select bank0
  1517     074B  00C0               	movwf	??_main+2
  1518     074C  300F               	movlw	15
  1519     074D  00BF               	movwf	??_main+1
  1520     074E  30F0               	movlw	240
  1521     074F  00BE               	movwf	??_main
  1522     0750                     u1457:
  1523     0750  0BBE               	decfsz	??_main,f
  1524     0751  2F50               	goto	u1457
  1525     0752  0BBF               	decfsz	??_main+1,f
  1526     0753  2F50               	goto	u1457
  1527     0754  0BC0               	decfsz	??_main+2,f
  1528     0755  2F50               	goto	u1457
  1529     0756  0000               	nop
  1530                           
  1531                           ;main.c: 203:             I2C_Master_Start();
  1532     0757  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  1533                           
  1534                           ;main.c: 204:             I2C_Master_Write(0xb0);
  1535     075C  30B0               	movlw	176
  1536     075D  00F0               	movwf	I2C_Master_Write@d
  1537     075E  3000               	movlw	0
  1538     075F  00F1               	movwf	I2C_Master_Write@d+1
  1539     0760  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1540                           
  1541                           ;main.c: 205:             I2C_Master_Write(0x02);
  1542     0765  3002               	movlw	2
  1543     0766  00F0               	movwf	I2C_Master_Write@d
  1544     0767  3000               	movlw	0
  1545     0768  00F1               	movwf	I2C_Master_Write@d+1
  1546     0769  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1547                           
  1548                           ;main.c: 206:             I2C_Master_Stop();
  1549     076E  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  1550                           
  1551                           ;main.c: 209:             while(PORTBbits.RB3 & !((sec == segundos) & (min == minutos)) 
      +                          ){
  1552     0773  2FAD               	goto	l1882
  1553     0774                     l1876:
  1554                           
  1555                           ;main.c: 211:                 segundos = leer_x(0x00);
  1556     0774  3000               	movlw	0
  1557     0775  120A  118A  2407  120A  118A  	fcall	_leer_x
  1558     077A  1283               	bcf	3,5	;RP0=0, select bank0
  1559     077B  00AE               	movwf	_segundos
  1560                           
  1561                           ;main.c: 212:                 minutos = leer_x(0x01);
  1562     077C  3001               	movlw	1
  1563     077D  120A  118A  2407  120A  118A  	fcall	_leer_x
  1564     0782  1283               	bcf	3,5	;RP0=0, select bank0
  1565     0783  00AC               	movwf	_minutos
  1566                           
  1567                           ;main.c: 213:                 Escribir_dato(segundos, 14, 1);
  1568     0784  300E               	movlw	14
  1569     0785  00FC               	movwf	Escribir_dato@posx
  1570     0786  01FD               	clrf	Escribir_dato@posy
  1571     0787  0AFD               	incf	Escribir_dato@posy,f
  1572     0788  082E               	movf	_segundos,w
  1573     0789  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1574                           
  1575                           ;main.c: 214:                 Escribir_dato(minutos, 11, 1);
  1576     078E  300B               	movlw	11
  1577     078F  00FC               	movwf	Escribir_dato@posx
  1578     0790  01FD               	clrf	Escribir_dato@posy
  1579     0791  0AFD               	incf	Escribir_dato@posy,f
  1580     0792  082C               	movf	_minutos,w
  1581     0793  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1582                           
  1583                           ;main.c: 216:                 leer_temperatura();
  1584     0798  120A  118A  2271  120A  118A  	fcall	_leer_temperatura
  1585                           
  1586                           ;main.c: 217:                 _delay((unsigned long)((10)*(8000000/4000.0)));
  1587     079D  301A               	movlw	26
  1588     079E  1283               	bcf	3,5	;RP0=0, select bank0
  1589     079F  1303               	bcf	3,6	;RP1=0, select bank0
  1590     07A0  00BF               	movwf	??_main+1
  1591     07A1  30F7               	movlw	247
  1592     07A2  00BE               	movwf	??_main
  1593     07A3                     u1467:
  1594     07A3  0BBE               	decfsz	??_main,f
  1595     07A4  2FA3               	goto	u1467
  1596     07A5  0BBF               	decfsz	??_main+1,f
  1597     07A6  2FA3               	goto	u1467
  1598     07A7  2FA8               	nop2
  1599                           
  1600                           ;main.c: 218:                 envio_ESP();
  1601     07A8  120A  118A  258C  120A  118A  	fcall	_envio_ESP
  1602     07AD                     l1882:
  1603                           
  1604                           ;main.c: 209:             while(PORTBbits.RB3 & !((sec == segundos) & (min == minutos)) 
      +                          ){
  1605     07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1606     07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1607     07AF  01C1               	clrf	_main$202
  1608     07B0  0AC1               	incf	_main$202,f
  1609     07B1  082F               	movf	_sec,w
  1610     07B2  062E               	xorwf	_segundos,w
  1611     07B3  1D03               	skipz
  1612     07B4  2FBA               	goto	l1888
  1613     07B5  082D               	movf	_min,w
  1614     07B6  062C               	xorwf	_minutos,w
  1615     07B7  1D03               	skipz
  1616     07B8  2FBA               	goto	l1888
  1617     07B9  01C1               	clrf	_main$202
  1618     07BA                     l1888:
  1619     07BA  0C06               	rrf	6,w	;volatile
  1620     07BB  00BE               	movwf	??_main
  1621     07BC  0CBE               	rrf	??_main,f
  1622     07BD  0C3E               	rrf	??_main,w
  1623     07BE  3901               	andlw	1
  1624     07BF  0541               	andwf	_main$202,w
  1625     07C0  1D03               	btfss	3,2
  1626     07C1  2F74               	goto	l1876
  1627                           
  1628                           ;main.c: 221:             segundos = 0;
  1629     07C2  01AE               	clrf	_segundos
  1630                           
  1631                           ;main.c: 222:             minutos = 0;
  1632     07C3  01AC               	clrf	_minutos
  1633                           
  1634                           ;main.c: 224:             I2C_Master_Start();
  1635     07C4  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  1636                           
  1637                           ;main.c: 225:             I2C_Master_Write(0xb0);
  1638     07C9  30B0               	movlw	176
  1639     07CA  00F0               	movwf	I2C_Master_Write@d
  1640     07CB  3000               	movlw	0
  1641     07CC  00F1               	movwf	I2C_Master_Write@d+1
  1642     07CD  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1643                           
  1644                           ;main.c: 226:             I2C_Master_Write(0x03);
  1645     07D2  3003               	movlw	3
  1646     07D3  00F0               	movwf	I2C_Master_Write@d
  1647     07D4  3000               	movlw	0
  1648     07D5  00F1               	movwf	I2C_Master_Write@d+1
  1649     07D6  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  1650                           
  1651                           ;main.c: 227:             I2C_Master_Stop();
  1652     07DB  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  1653                           
  1654                           ;main.c: 230:             Escribir_dato(0, 14, 2);
  1655     07E0  300E               	movlw	14
  1656     07E1  00FC               	movwf	Escribir_dato@posx
  1657     07E2  3002               	movlw	2
  1658     07E3  00FD               	movwf	Escribir_dato@posy
  1659     07E4  3000               	movlw	0
  1660     07E5  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1661                           
  1662                           ;main.c: 231:             Escribir_dato(0, 11, 2);
  1663     07EA  300B               	movlw	11
  1664     07EB  00FC               	movwf	Escribir_dato@posx
  1665     07EC  3002               	movlw	2
  1666     07ED  00FD               	movwf	Escribir_dato@posy
  1667     07EE  3000               	movlw	0
  1668     07EF  120A  118A  248C  120A  118A  	fcall	_Escribir_dato
  1669     07F4  2E39               	goto	l1776
  1670     07F5                     __end_of_main:
  1671                           
  1672                           	psect	text1
  1673     0446                     __ptext1:	
  1674 ;; *************** function _setupINTOSC *****************
  1675 ;; Defined at:
  1676 ;;		line 10 in file "oscilador.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  IRCF            1    wreg     unsigned char 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  IRCF            1    0[COMMON] unsigned char 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : B00/0
  1687 ;;		On exit  : B00/100
  1688 ;;		Unchanged: 800/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1690 ;;      Params:         0       0       0       0       0
  1691 ;;      Locals:         1       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0
  1693 ;;      Totals:         1       0       0       0       0
  1694 ;;Total ram usage:        1 bytes
  1695 ;; Hardware stack levels used: 1
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703     0446                     _setupINTOSC:	
  1704                           ;psect for function _setupINTOSC
  1705                           
  1706                           
  1707                           ;incstack = 0
  1708                           ; Regs used in _setupINTOSC: [wreg+status,2+status,0]
  1709                           ;setupINTOSC@IRCF stored from wreg
  1710     0446  00F0               	movwf	setupINTOSC@IRCF
  1711                           
  1712                           ;oscilador.c: 11:     if (IRCF == 7){
  1713     0447  3007               	movlw	7
  1714     0448  0670               	xorwf	setupINTOSC@IRCF,w
  1715     0449  1D03               	btfss	3,2
  1716     044A  2C4E               	goto	l280
  1717                           
  1718                           ;oscilador.c: 12:         OSCCONbits.IRCF = 0b111;
  1719     044B  3070               	movlw	112
  1720     044C  1683               	bsf	3,5	;RP0=1, select bank1
  1721     044D  048F               	iorwf	15,f	;volatile
  1722     044E                     l280:	
  1723                           ;oscilador.c: 13:     }
  1724                           
  1725                           
  1726                           ;oscilador.c: 14:     if (IRCF == 6){
  1727     044E  3006               	movlw	6
  1728     044F  0670               	xorwf	setupINTOSC@IRCF,w
  1729     0450  1D03               	btfss	3,2
  1730     0451  2C57               	goto	l281
  1731                           
  1732                           ;oscilador.c: 15:         OSCCONbits.IRCF = 0b110;
  1733     0452  1683               	bsf	3,5	;RP0=1, select bank1
  1734     0453  080F               	movf	15,w	;volatile
  1735     0454  398F               	andlw	-113
  1736     0455  3860               	iorlw	96
  1737     0456  008F               	movwf	15	;volatile
  1738     0457                     l281:	
  1739                           ;oscilador.c: 16:     }
  1740                           
  1741                           
  1742                           ;oscilador.c: 17:     if (IRCF == 5){
  1743     0457  3005               	movlw	5
  1744     0458  0670               	xorwf	setupINTOSC@IRCF,w
  1745     0459  1D03               	btfss	3,2
  1746     045A  2C60               	goto	l282
  1747                           
  1748                           ;oscilador.c: 18:         OSCCONbits.IRCF = 0b101;
  1749     045B  1683               	bsf	3,5	;RP0=1, select bank1
  1750     045C  080F               	movf	15,w	;volatile
  1751     045D  398F               	andlw	-113
  1752     045E  3850               	iorlw	80
  1753     045F  008F               	movwf	15	;volatile
  1754     0460                     l282:	
  1755                           ;oscilador.c: 19:     }
  1756                           
  1757                           
  1758                           ;oscilador.c: 20:     if (IRCF == 4){
  1759     0460  3004               	movlw	4
  1760     0461  0670               	xorwf	setupINTOSC@IRCF,w
  1761     0462  1D03               	btfss	3,2
  1762     0463  2C69               	goto	l283
  1763                           
  1764                           ;oscilador.c: 21:         OSCCONbits.IRCF = 0b100;
  1765     0464  1683               	bsf	3,5	;RP0=1, select bank1
  1766     0465  080F               	movf	15,w	;volatile
  1767     0466  398F               	andlw	-113
  1768     0467  3840               	iorlw	64
  1769     0468  008F               	movwf	15	;volatile
  1770     0469                     l283:	
  1771                           ;oscilador.c: 22:     }
  1772                           
  1773                           
  1774                           ;oscilador.c: 23:     if (IRCF == 3){
  1775     0469  3003               	movlw	3
  1776     046A  0670               	xorwf	setupINTOSC@IRCF,w
  1777     046B  1D03               	btfss	3,2
  1778     046C  2C72               	goto	l284
  1779                           
  1780                           ;oscilador.c: 24:         OSCCONbits.IRCF = 0b011;
  1781     046D  1683               	bsf	3,5	;RP0=1, select bank1
  1782     046E  080F               	movf	15,w	;volatile
  1783     046F  398F               	andlw	-113
  1784     0470  3830               	iorlw	48
  1785     0471  008F               	movwf	15	;volatile
  1786     0472                     l284:	
  1787                           ;oscilador.c: 25:     }
  1788                           
  1789                           
  1790                           ;oscilador.c: 26:     if (IRCF == 2){
  1791     0472  3002               	movlw	2
  1792     0473  0670               	xorwf	setupINTOSC@IRCF,w
  1793     0474  1D03               	btfss	3,2
  1794     0475  2C7B               	goto	l285
  1795                           
  1796                           ;oscilador.c: 27:         OSCCONbits.IRCF = 0b010;
  1797     0476  1683               	bsf	3,5	;RP0=1, select bank1
  1798     0477  080F               	movf	15,w	;volatile
  1799     0478  398F               	andlw	-113
  1800     0479  3820               	iorlw	32
  1801     047A  008F               	movwf	15	;volatile
  1802     047B                     l285:	
  1803                           ;oscilador.c: 28:     }
  1804                           
  1805                           
  1806                           ;oscilador.c: 29:     if (IRCF == 1){
  1807     047B  0370               	decf	setupINTOSC@IRCF,w
  1808     047C  1D03               	btfss	3,2
  1809     047D  2C83               	goto	l286
  1810                           
  1811                           ;oscilador.c: 30:         OSCCONbits.IRCF = 0b001;
  1812     047E  1683               	bsf	3,5	;RP0=1, select bank1
  1813     047F  080F               	movf	15,w	;volatile
  1814     0480  398F               	andlw	-113
  1815     0481  3810               	iorlw	16
  1816     0482  008F               	movwf	15	;volatile
  1817     0483                     l286:	
  1818                           ;oscilador.c: 31:     }
  1819                           
  1820                           
  1821                           ;oscilador.c: 32:     if (IRCF == 0){
  1822     0483  0870               	movf	setupINTOSC@IRCF,w
  1823     0484  1D03               	btfss	3,2
  1824     0485  2C89               	goto	l1712
  1825                           
  1826                           ;oscilador.c: 33:         OSCCONbits.IRCF = 0b000;
  1827     0486  308F               	movlw	-113
  1828     0487  1683               	bsf	3,5	;RP0=1, select bank1
  1829     0488  058F               	andwf	15,f	;volatile
  1830     0489                     l1712:
  1831                           
  1832                           ;oscilador.c: 36:     OSCCONbits.SCS = 1;
  1833     0489  1683               	bsf	3,5	;RP0=1, select bank1
  1834     048A  140F               	bsf	15,0	;volatile
  1835     048B  0008               	return
  1836     048C                     __end_of_setupINTOSC:
  1837                           
  1838                           	psect	text2
  1839     0299                     __ptext2:	
  1840 ;; *************** function _portsetup *****************
  1841 ;; Defined at:
  1842 ;;		line 236 in file "main.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0, pclath, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : B00/100
  1853 ;;		On exit  : 300/100
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1856 ;;      Params:         0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0
  1858 ;;      Temps:          0       3       0       0       0
  1859 ;;      Totals:         0       3       0       0       0
  1860 ;;Total ram usage:        3 bytes
  1861 ;; Hardware stack levels used: 1
  1862 ;; Hardware stack levels required when called: 2
  1863 ;; This function calls:
  1864 ;;		_I2C_Master_Init
  1865 ;; This function is called by:
  1866 ;;		_main
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870     0299                     _portsetup:	
  1871                           ;psect for function _portsetup
  1872                           
  1873                           
  1874                           ;main.c: 237:     ANSEL = 0;
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _portsetup: [wreg+status,2+status,0+pclath+cstack]
  1878     0299  1703               	bsf	3,6	;RP1=1, select bank3
  1879     029A  0188               	clrf	8	;volatile
  1880                           
  1881                           ;main.c: 238:     ANSELH = 0;
  1882     029B  0189               	clrf	9	;volatile
  1883                           
  1884                           ;main.c: 239:     TRISD = 0;
  1885     029C  1303               	bcf	3,6	;RP1=0, select bank1
  1886     029D  0188               	clrf	8	;volatile
  1887                           
  1888                           ;main.c: 240:     PORTD = 0;
  1889     029E  1283               	bcf	3,5	;RP0=0, select bank0
  1890     029F  0188               	clrf	8	;volatile
  1891                           
  1892                           ;main.c: 243:     TRISB = 0b11111110;
  1893     02A0  30FE               	movlw	254
  1894     02A1  1683               	bsf	3,5	;RP0=1, select bank1
  1895     02A2  0086               	movwf	6	;volatile
  1896                           
  1897                           ;main.c: 244:     PORTB = 0b11111110;
  1898     02A3  30FE               	movlw	254
  1899     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1900     02A5  0086               	movwf	6	;volatile
  1901                           
  1902                           ;main.c: 245:     WPUB = 0b11111110;
  1903     02A6  30FE               	movlw	254
  1904     02A7  1683               	bsf	3,5	;RP0=1, select bank1
  1905     02A8  0095               	movwf	21	;volatile
  1906                           
  1907                           ;main.c: 246:     OPTION_REGbits.nRBPU = 0;
  1908     02A9  1381               	bcf	1,7	;volatile
  1909                           
  1910                           ;main.c: 247:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1911     02AA  300B               	movlw	11
  1912     02AB  1283               	bcf	3,5	;RP0=0, select bank0
  1913     02AC  1303               	bcf	3,6	;RP1=0, select bank0
  1914     02AD  00BD               	movwf	??_portsetup+2
  1915     02AE  3026               	movlw	38
  1916     02AF  00BC               	movwf	??_portsetup+1
  1917     02B0  305D               	movlw	93
  1918     02B1  00BB               	movwf	??_portsetup
  1919     02B2                     u1477:
  1920     02B2  0BBB               	decfsz	??_portsetup,f
  1921     02B3  2AB2               	goto	u1477
  1922     02B4  0BBC               	decfsz	??_portsetup+1,f
  1923     02B5  2AB2               	goto	u1477
  1924     02B6  0BBD               	decfsz	??_portsetup+2,f
  1925     02B7  2AB2               	goto	u1477
  1926                           
  1927                           ;main.c: 248:     I2C_Master_Init(100000);
  1928     02B8  3000               	movlw	0
  1929     02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1930     02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1931     02BB  00B6               	movwf	I2C_Master_Init@c+3
  1932     02BC  3001               	movlw	1
  1933     02BD  00B5               	movwf	I2C_Master_Init@c+2
  1934     02BE  3086               	movlw	134
  1935     02BF  00B4               	movwf	I2C_Master_Init@c+1
  1936     02C0  30A0               	movlw	160
  1937     02C1  00B3               	movwf	I2C_Master_Init@c
  1938     02C2  120A  118A  22F7   	fcall	_I2C_Master_Init
  1939     02C5  0008               	return
  1940     02C6                     __end_of_portsetup:
  1941                           
  1942                           	psect	text3
  1943     02F7                     __ptext3:	
  1944 ;; *************** function _I2C_Master_Init *****************
  1945 ;; Defined at:
  1946 ;;		line 16 in file "I2C.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  c               4    0[BANK0 ] const unsigned long 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0, pclath, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 300/0
  1957 ;;		On exit  : 300/100
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1960 ;;      Params:         0       4       0       0       0
  1961 ;;      Locals:         0       0       0       0       0
  1962 ;;      Temps:          0       4       0       0       0
  1963 ;;      Totals:         0       8       0       0       0
  1964 ;;Total ram usage:        8 bytes
  1965 ;; Hardware stack levels used: 1
  1966 ;; Hardware stack levels required when called: 1
  1967 ;; This function calls:
  1968 ;;		___lldiv
  1969 ;; This function is called by:
  1970 ;;		_portsetup
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974     02F7                     _I2C_Master_Init:	
  1975                           ;psect for function _I2C_Master_Init
  1976                           
  1977                           
  1978                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  1979                           
  1980                           ;incstack = 0
  1981                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  1982     02F7  3028               	movlw	40
  1983     02F8  0094               	movwf	20	;volatile
  1984                           
  1985                           ;I2C.c: 19:     SSPCON2 = 0;
  1986     02F9  1683               	bsf	3,5	;RP0=1, select bank1
  1987     02FA  0191               	clrf	17	;volatile
  1988                           
  1989                           ;I2C.c: 20:     SSPADD = (8000000/(4*c))-1;
  1990     02FB  1283               	bcf	3,5	;RP0=0, select bank0
  1991     02FC  0833               	movf	I2C_Master_Init@c,w
  1992     02FD  00B7               	movwf	??_I2C_Master_Init
  1993     02FE  0834               	movf	I2C_Master_Init@c+1,w
  1994     02FF  00B8               	movwf	??_I2C_Master_Init+1
  1995     0300  0835               	movf	I2C_Master_Init@c+2,w
  1996     0301  00B9               	movwf	??_I2C_Master_Init+2
  1997     0302  0836               	movf	I2C_Master_Init@c+3,w
  1998     0303  00BA               	movwf	??_I2C_Master_Init+3
  1999     0304  3002               	movlw	2
  2000     0305                     u1135:
  2001     0305  1003               	clrc
  2002     0306  0DB7               	rlf	??_I2C_Master_Init,f
  2003     0307  0DB8               	rlf	??_I2C_Master_Init+1,f
  2004     0308  0DB9               	rlf	??_I2C_Master_Init+2,f
  2005     0309  0DBA               	rlf	??_I2C_Master_Init+3,f
  2006     030A  3EFF               	addlw	-1
  2007     030B  1D03               	skipz
  2008     030C  2B05               	goto	u1135
  2009     030D  083A               	movf	??_I2C_Master_Init+3,w
  2010     030E  00F3               	movwf	___lldiv@divisor+3
  2011     030F  0839               	movf	??_I2C_Master_Init+2,w
  2012     0310  00F2               	movwf	___lldiv@divisor+2
  2013     0311  0838               	movf	??_I2C_Master_Init+1,w
  2014     0312  00F1               	movwf	___lldiv@divisor+1
  2015     0313  0837               	movf	??_I2C_Master_Init,w
  2016     0314  00F0               	movwf	___lldiv@divisor
  2017     0315  3000               	movlw	0
  2018     0316  00F7               	movwf	___lldiv@dividend+3
  2019     0317  307A               	movlw	122
  2020     0318  00F6               	movwf	___lldiv@dividend+2
  2021     0319  3012               	movlw	18
  2022     031A  00F5               	movwf	___lldiv@dividend+1
  2023     031B  3000               	movlw	0
  2024     031C  00F4               	movwf	___lldiv@dividend
  2025     031D  120A  118A  252E   	fcall	___lldiv
  2026     0320  0870               	movf	?___lldiv,w
  2027     0321  3EFF               	addlw	255
  2028     0322  1683               	bsf	3,5	;RP0=1, select bank1
  2029     0323  0093               	movwf	19	;volatile
  2030                           
  2031                           ;I2C.c: 21:     SSPSTAT = 0;
  2032     0324  0194               	clrf	20	;volatile
  2033                           
  2034                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  2035     0325  1587               	bsf	7,3	;volatile
  2036                           
  2037                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  2038     0326  1607               	bsf	7,4	;volatile
  2039     0327  0008               	return
  2040     0328                     __end_of_I2C_Master_Init:
  2041                           
  2042                           	psect	text4
  2043     052E                     __ptext4:	
  2044 ;; *************** function ___lldiv *****************
  2045 ;; Defined at:
  2046 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\__lldiv.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  divisor         4    0[COMMON] unsigned long 
  2049 ;;  dividend        4    4[COMMON] unsigned long 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  quotient        4    9[COMMON] unsigned long 
  2052 ;;  counter         1   13[COMMON] unsigned char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  4    0[COMMON] unsigned long 
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, status,0
  2057 ;; Tracked objects:
  2058 ;;		On entry : 300/0
  2059 ;;		On exit  : 300/0
  2060 ;;		Unchanged: 300/0
  2061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2062 ;;      Params:         8       0       0       0       0
  2063 ;;      Locals:         5       0       0       0       0
  2064 ;;      Temps:          1       0       0       0       0
  2065 ;;      Totals:        14       0       0       0       0
  2066 ;;Total ram usage:       14 bytes
  2067 ;; Hardware stack levels used: 1
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_I2C_Master_Init
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075     052E                     ___lldiv:	
  2076                           ;psect for function ___lldiv
  2077                           
  2078                           
  2079                           ;incstack = 0
  2080                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2081     052E  3000               	movlw	0
  2082     052F  00FC               	movwf	___lldiv@quotient+3
  2083     0530  3000               	movlw	0
  2084     0531  00FB               	movwf	___lldiv@quotient+2
  2085     0532  3000               	movlw	0
  2086     0533  00FA               	movwf	___lldiv@quotient+1
  2087     0534  3000               	movlw	0
  2088     0535  00F9               	movwf	___lldiv@quotient
  2089     0536  0873               	movf	___lldiv@divisor+3,w
  2090     0537  0472               	iorwf	___lldiv@divisor+2,w
  2091     0538  0471               	iorwf	___lldiv@divisor+1,w
  2092     0539  0470               	iorwf	___lldiv@divisor,w
  2093     053A  1903               	skipnz
  2094     053B  2D83               	goto	l1634
  2095     053C  01FD               	clrf	___lldiv@counter
  2096     053D  0AFD               	incf	___lldiv@counter,f
  2097     053E                     l1620:
  2098     053E  1BF3               	btfsc	___lldiv@divisor+3,7
  2099     053F  2D4E               	goto	l1622
  2100     0540  3001               	movlw	1
  2101     0541  00F8               	movwf	??___lldiv
  2102     0542                     u1075:
  2103     0542  1003               	clrc
  2104     0543  0DF0               	rlf	___lldiv@divisor,f
  2105     0544  0DF1               	rlf	___lldiv@divisor+1,f
  2106     0545  0DF2               	rlf	___lldiv@divisor+2,f
  2107     0546  0DF3               	rlf	___lldiv@divisor+3,f
  2108     0547  0BF8               	decfsz	??___lldiv,f
  2109     0548  2D42               	goto	u1075
  2110     0549  3001               	movlw	1
  2111     054A  00F8               	movwf	??___lldiv
  2112     054B  0878               	movf	??___lldiv,w
  2113     054C  07FD               	addwf	___lldiv@counter,f
  2114     054D  2D3E               	goto	l1620
  2115     054E                     l1622:
  2116     054E  3001               	movlw	1
  2117     054F  00F8               	movwf	??___lldiv
  2118     0550                     u1095:
  2119     0550  1003               	clrc
  2120     0551  0DF9               	rlf	___lldiv@quotient,f
  2121     0552  0DFA               	rlf	___lldiv@quotient+1,f
  2122     0553  0DFB               	rlf	___lldiv@quotient+2,f
  2123     0554  0DFC               	rlf	___lldiv@quotient+3,f
  2124     0555  0BF8               	decfsz	??___lldiv,f
  2125     0556  2D50               	goto	u1095
  2126     0557  0873               	movf	___lldiv@divisor+3,w
  2127     0558  0277               	subwf	___lldiv@dividend+3,w
  2128     0559  1D03               	skipz
  2129     055A  2D65               	goto	u1105
  2130     055B  0872               	movf	___lldiv@divisor+2,w
  2131     055C  0276               	subwf	___lldiv@dividend+2,w
  2132     055D  1D03               	skipz
  2133     055E  2D65               	goto	u1105
  2134     055F  0871               	movf	___lldiv@divisor+1,w
  2135     0560  0275               	subwf	___lldiv@dividend+1,w
  2136     0561  1D03               	skipz
  2137     0562  2D65               	goto	u1105
  2138     0563  0870               	movf	___lldiv@divisor,w
  2139     0564  0274               	subwf	___lldiv@dividend,w
  2140     0565                     u1105:
  2141     0565  1C03               	skipc
  2142     0566  2D76               	goto	l1630
  2143     0567  0870               	movf	___lldiv@divisor,w
  2144     0568  02F4               	subwf	___lldiv@dividend,f
  2145     0569  0871               	movf	___lldiv@divisor+1,w
  2146     056A  1C03               	skipc
  2147     056B  0F71               	incfsz	___lldiv@divisor+1,w
  2148     056C  02F5               	subwf	___lldiv@dividend+1,f
  2149     056D  0872               	movf	___lldiv@divisor+2,w
  2150     056E  1C03               	skipc
  2151     056F  0F72               	incfsz	___lldiv@divisor+2,w
  2152     0570  02F6               	subwf	___lldiv@dividend+2,f
  2153     0571  0873               	movf	___lldiv@divisor+3,w
  2154     0572  1C03               	skipc
  2155     0573  0F73               	incfsz	___lldiv@divisor+3,w
  2156     0574  02F7               	subwf	___lldiv@dividend+3,f
  2157     0575  1479               	bsf	___lldiv@quotient,0
  2158     0576                     l1630:
  2159     0576  3001               	movlw	1
  2160     0577                     u1115:
  2161     0577  1003               	clrc
  2162     0578  0CF3               	rrf	___lldiv@divisor+3,f
  2163     0579  0CF2               	rrf	___lldiv@divisor+2,f
  2164     057A  0CF1               	rrf	___lldiv@divisor+1,f
  2165     057B  0CF0               	rrf	___lldiv@divisor,f
  2166     057C  3EFF               	addlw	-1
  2167     057D  1D03               	skipz
  2168     057E  2D77               	goto	u1115
  2169     057F  3001               	movlw	1
  2170     0580  02FD               	subwf	___lldiv@counter,f
  2171     0581  1D03               	btfss	3,2
  2172     0582  2D4E               	goto	l1622
  2173     0583                     l1634:
  2174     0583  087C               	movf	___lldiv@quotient+3,w
  2175     0584  00F3               	movwf	?___lldiv+3
  2176     0585  087B               	movf	___lldiv@quotient+2,w
  2177     0586  00F2               	movwf	?___lldiv+2
  2178     0587  087A               	movf	___lldiv@quotient+1,w
  2179     0588  00F1               	movwf	?___lldiv+1
  2180     0589  0879               	movf	___lldiv@quotient,w
  2181     058A  00F0               	movwf	?___lldiv
  2182     058B  0008               	return
  2183     058C                     __end_of___lldiv:
  2184                           
  2185                           	psect	text5
  2186     0407                     __ptext5:	
  2187 ;; *************** function _leer_x *****************
  2188 ;; Defined at:
  2189 ;;		line 24 in file "DS3231.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  address         1    wreg     unsigned char 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  address         1   11[COMMON] unsigned char 
  2194 ;;  valor           1   12[COMMON] unsigned char 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      unsigned char 
  2197 ;; Registers used:
  2198 ;;		wreg, status,2, status,0, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 200/100
  2201 ;;		On exit  : 300/100
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2204 ;;      Params:         0       0       0       0       0
  2205 ;;      Locals:         2       0       0       0       0
  2206 ;;      Temps:          2       0       0       0       0
  2207 ;;      Totals:         4       0       0       0       0
  2208 ;;Total ram usage:        4 bytes
  2209 ;; Hardware stack levels used: 1
  2210 ;; Hardware stack levels required when called: 2
  2211 ;; This function calls:
  2212 ;;		_I2C_Master_Read
  2213 ;;		_I2C_Master_RepeatedStart
  2214 ;;		_I2C_Master_Start
  2215 ;;		_I2C_Master_Stop
  2216 ;;		_I2C_Master_Write
  2217 ;;		_convertir
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223     0407                     _leer_x:	
  2224                           ;psect for function _leer_x
  2225                           
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _leer_x: [wreg+status,2+status,0+pclath+cstack]
  2229                           ;leer_x@address stored from wreg
  2230     0407  00FB               	movwf	leer_x@address
  2231                           
  2232                           ;DS3231.c: 25:     uint8_t valor;;DS3231.c: 26:     I2C_Master_Start();
  2233     0408  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  2234                           
  2235                           ;DS3231.c: 27:     I2C_Master_Write(0xD0);
  2236     040D  30D0               	movlw	208
  2237     040E  00F0               	movwf	I2C_Master_Write@d
  2238     040F  3000               	movlw	0
  2239     0410  00F1               	movwf	I2C_Master_Write@d+1
  2240     0411  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  2241                           
  2242                           ;DS3231.c: 28:     I2C_Master_Write(address);
  2243     0416  087B               	movf	leer_x@address,w
  2244     0417  00F9               	movwf	??_leer_x
  2245     0418  01FA               	clrf	??_leer_x+1
  2246     0419  0879               	movf	??_leer_x,w
  2247     041A  00F0               	movwf	I2C_Master_Write@d
  2248     041B  087A               	movf	??_leer_x+1,w
  2249     041C  00F1               	movwf	I2C_Master_Write@d+1
  2250     041D  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  2251                           
  2252                           ;DS3231.c: 29:     I2C_Master_RepeatedStart();
  2253     0422  120A  118A  2168  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2254                           
  2255                           ;DS3231.c: 30:     I2C_Master_Write(0xD1);
  2256     0427  30D1               	movlw	209
  2257     0428  00F0               	movwf	I2C_Master_Write@d
  2258     0429  3000               	movlw	0
  2259     042A  00F1               	movwf	I2C_Master_Write@d+1
  2260     042B  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  2261                           
  2262                           ;DS3231.c: 31:     valor = I2C_Master_Read(0);
  2263     0430  3000               	movlw	0
  2264     0431  00F0               	movwf	I2C_Master_Read@a
  2265     0432  00F1               	movwf	I2C_Master_Read@a+1
  2266     0433  120A  118A  224C  120A  118A  	fcall	_I2C_Master_Read
  2267     0438  0870               	movf	?_I2C_Master_Read,w
  2268     0439  00FC               	movwf	leer_x@valor
  2269                           
  2270                           ;DS3231.c: 32:     I2C_Master_Stop();
  2271     043A  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  2272                           
  2273                           ;DS3231.c: 33:     valor = convertir(valor);
  2274     043F  087C               	movf	leer_x@valor,w
  2275     0440  120A  118A  21D1   	fcall	_convertir
  2276     0443  00FC               	movwf	leer_x@valor
  2277                           
  2278                           ;DS3231.c: 35:     return valor;
  2279     0444  087C               	movf	leer_x@valor,w
  2280     0445  0008               	return
  2281     0446                     __end_of_leer_x:
  2282                           
  2283                           	psect	text6
  2284     01D1                     __ptext6:	
  2285 ;; *************** function _convertir *****************
  2286 ;; Defined at:
  2287 ;;		line 5 in file "DS3231.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  valor           1    wreg     unsigned char 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  valor           1    8[COMMON] unsigned char 
  2292 ;;  conversion      1    7[COMMON] unsigned char 
  2293 ;;  decena          1    6[COMMON] unsigned char 
  2294 ;;  unidad          1    5[COMMON] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      unsigned char 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 300/100
  2301 ;;		On exit  : 300/100
  2302 ;;		Unchanged: 300/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2304 ;;      Params:         0       0       0       0       0
  2305 ;;      Locals:         4       0       0       0       0
  2306 ;;      Temps:          1       0       0       0       0
  2307 ;;      Totals:         5       0       0       0       0
  2308 ;;Total ram usage:        5 bytes
  2309 ;; Hardware stack levels used: 1
  2310 ;; Hardware stack levels required when called: 1
  2311 ;; This function calls:
  2312 ;;		___bmul
  2313 ;; This function is called by:
  2314 ;;		_leer_x
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318     01D1                     _convertir:	
  2319                           ;psect for function _convertir
  2320                           
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _convertir: [wreg+status,2+status,0+pclath+cstack]
  2324                           ;convertir@valor stored from wreg
  2325     01D1  00F8               	movwf	convertir@valor
  2326                           
  2327                           ;DS3231.c: 6:     uint8_t unidad;;DS3231.c: 7:     uint8_t decena;;DS3231.c: 8:     uint
      +                          8_t conversion;;DS3231.c: 9:     unidad = valor & 0x0F;
  2328     01D2  0878               	movf	convertir@valor,w
  2329     01D3  390F               	andlw	15
  2330     01D4  00F5               	movwf	convertir@unidad
  2331                           
  2332                           ;DS3231.c: 10:     decena = ((valor & 0xF0) >> 4);
  2333     01D5  0878               	movf	convertir@valor,w
  2334     01D6  00F4               	movwf	??_convertir
  2335     01D7  3004               	movlw	4
  2336     01D8                     u1155:
  2337     01D8  1003               	clrc
  2338     01D9  0CF4               	rrf	??_convertir,f
  2339     01DA  3EFF               	addlw	-1
  2340     01DB  1D03               	skipz
  2341     01DC  29D8               	goto	u1155
  2342     01DD  0874               	movf	??_convertir,w
  2343     01DE  390F               	andlw	15
  2344     01DF  00F6               	movwf	convertir@decena
  2345                           
  2346                           ;DS3231.c: 11:     conversion = unidad+(decena*10);
  2347     01E0  300A               	movlw	10
  2348     01E1  00F0               	movwf	___bmul@multiplicand
  2349     01E2  0876               	movf	convertir@decena,w
  2350     01E3  120A  118A  2190   	fcall	___bmul
  2351     01E6  0775               	addwf	convertir@unidad,w
  2352     01E7  00F7               	movwf	convertir@conversion
  2353                           
  2354                           ;DS3231.c: 12:     return conversion;
  2355     01E8  0877               	movf	convertir@conversion,w
  2356     01E9  0008               	return
  2357     01EA                     __end_of_convertir:
  2358                           
  2359                           	psect	text7
  2360     0190                     __ptext7:	
  2361 ;; *************** function ___bmul *****************
  2362 ;; Defined at:
  2363 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul8.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  multiplier      1    wreg     unsigned char 
  2366 ;;  multiplicand    1    0[COMMON] unsigned char 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  multiplier      1    3[COMMON] unsigned char 
  2369 ;;  product         1    2[COMMON] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      unsigned char 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 300/100
  2376 ;;		On exit  : 300/100
  2377 ;;		Unchanged: 300/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         1       0       0       0       0
  2380 ;;      Locals:         2       0       0       0       0
  2381 ;;      Temps:          1       0       0       0       0
  2382 ;;      Totals:         4       0       0       0       0
  2383 ;;Total ram usage:        4 bytes
  2384 ;; Hardware stack levels used: 1
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_convertir
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392     0190                     ___bmul:	
  2393                           ;psect for function ___bmul
  2394                           
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2398                           ;___bmul@multiplier stored from wreg
  2399     0190  00F3               	movwf	___bmul@multiplier
  2400     0191  01F2               	clrf	___bmul@product
  2401     0192                     l1602:
  2402     0192  1C73               	btfss	___bmul@multiplier,0
  2403     0193  2998               	goto	l1606
  2404     0194  0870               	movf	___bmul@multiplicand,w
  2405     0195  00F1               	movwf	??___bmul
  2406     0196  0871               	movf	??___bmul,w
  2407     0197  07F2               	addwf	___bmul@product,f
  2408     0198                     l1606:
  2409     0198  1003               	clrc
  2410     0199  0DF0               	rlf	___bmul@multiplicand,f
  2411     019A  1003               	clrc
  2412     019B  0CF3               	rrf	___bmul@multiplier,f
  2413     019C  0873               	movf	___bmul@multiplier,w
  2414     019D  1D03               	btfss	3,2
  2415     019E  2992               	goto	l1602
  2416     019F  0872               	movf	___bmul@product,w
  2417     01A0  0008               	return
  2418     01A1                     __end_of___bmul:
  2419                           
  2420                           	psect	text8
  2421     0168                     __ptext8:	
  2422 ;; *************** function _I2C_Master_RepeatedStart *****************
  2423 ;; Defined at:
  2424 ;;		line 47 in file "I2C.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, pclath, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 300/0
  2435 ;;		On exit  : 300/100
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2438 ;;      Params:         0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used: 1
  2444 ;; Hardware stack levels required when called: 1
  2445 ;; This function calls:
  2446 ;;		_I2C_Master_Wait
  2447 ;; This function is called by:
  2448 ;;		_leer_x
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452     0168                     _I2C_Master_RepeatedStart:	
  2453                           ;psect for function _I2C_Master_RepeatedStart
  2454                           
  2455                           
  2456                           ;I2C.c: 49:     I2C_Master_Wait();
  2457                           
  2458                           ;incstack = 0
  2459                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  2460     0168  120A  118A  217C   	fcall	_I2C_Master_Wait
  2461                           
  2462                           ;I2C.c: 50:     SSPCON2bits.RSEN = 1;
  2463     016B  1491               	bsf	17,1	;volatile
  2464     016C  0008               	return
  2465     016D                     __end_of_I2C_Master_RepeatedStart:
  2466                           
  2467                           	psect	text9
  2468     0271                     __ptext9:	
  2469 ;; *************** function _leer_temperatura *****************
  2470 ;; Defined at:
  2471 ;;		line 260 in file "main.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;		None
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;		None
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, status,0, pclath, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 200/100
  2482 ;;		On exit  : 300/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2485 ;;      Params:         0       0       0       0       0
  2486 ;;      Locals:         0       0       0       0       0
  2487 ;;      Temps:          0       0       0       0       0
  2488 ;;      Totals:         0       0       0       0       0
  2489 ;;Total ram usage:        0 bytes
  2490 ;; Hardware stack levels used: 1
  2491 ;; Hardware stack levels required when called: 4
  2492 ;; This function calls:
  2493 ;;		_Escribir_dato
  2494 ;;		_I2C_Master_Read
  2495 ;;		_I2C_Master_Start
  2496 ;;		_I2C_Master_Stop
  2497 ;;		_I2C_Master_Write
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503     0271                     _leer_temperatura:	
  2504                           ;psect for function _leer_temperatura
  2505                           
  2506                           
  2507                           ;main.c: 261:     I2C_Master_Start();
  2508                           
  2509                           ;incstack = 0
  2510                           ; Regs used in _leer_temperatura: [wreg+status,2+status,0+pclath+cstack]
  2511     0271  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  2512                           
  2513                           ;main.c: 262:     I2C_Master_Write(0xa1);
  2514     0276  30A1               	movlw	161
  2515     0277  00F0               	movwf	I2C_Master_Write@d
  2516     0278  3000               	movlw	0
  2517     0279  00F1               	movwf	I2C_Master_Write@d+1
  2518     027A  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  2519                           
  2520                           ;main.c: 263:     tempint = I2C_Master_Read(0);
  2521     027F  3000               	movlw	0
  2522     0280  00F0               	movwf	I2C_Master_Read@a
  2523     0281  00F1               	movwf	I2C_Master_Read@a+1
  2524     0282  120A  118A  224C  120A  118A  	fcall	_I2C_Master_Read
  2525     0287  0870               	movf	?_I2C_Master_Read,w
  2526     0288  1283               	bcf	3,5	;RP0=0, select bank0
  2527     0289  00B0               	movwf	_tempint
  2528                           
  2529                           ;main.c: 265:     I2C_Master_Stop();
  2530     028A  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  2531                           
  2532                           ;main.c: 266:     Escribir_dato(tempint, 4, 2);
  2533     028F  3004               	movlw	4
  2534     0290  00FC               	movwf	Escribir_dato@posx
  2535     0291  3002               	movlw	2
  2536     0292  00FD               	movwf	Escribir_dato@posy
  2537     0293  1283               	bcf	3,5	;RP0=0, select bank0
  2538     0294  0830               	movf	_tempint,w
  2539     0295  120A  118A  248C   	fcall	_Escribir_dato
  2540     0298  0008               	return
  2541     0299                     __end_of_leer_temperatura:
  2542                           
  2543                           	psect	text10
  2544     024C                     __ptext10:	
  2545 ;; *************** function _I2C_Master_Read *****************
  2546 ;; Defined at:
  2547 ;;		line 74 in file "I2C.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  a               2    0[COMMON] unsigned short 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  temp            2    4[COMMON] unsigned short 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  2    0[COMMON] unsigned short 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0, pclath, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 300/0
  2558 ;;		On exit  : 300/100
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2561 ;;      Params:         2       0       0       0       0
  2562 ;;      Locals:         2       0       0       0       0
  2563 ;;      Temps:          2       0       0       0       0
  2564 ;;      Totals:         6       0       0       0       0
  2565 ;;Total ram usage:        6 bytes
  2566 ;; Hardware stack levels used: 1
  2567 ;; Hardware stack levels required when called: 1
  2568 ;; This function calls:
  2569 ;;		_I2C_Master_Wait
  2570 ;; This function is called by:
  2571 ;;		_leer_temperatura
  2572 ;;		_leer_x
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576     024C                     _I2C_Master_Read:	
  2577                           ;psect for function _I2C_Master_Read
  2578                           
  2579                           
  2580                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  2584     024C  120A  118A  217C  120A  118A  	fcall	_I2C_Master_Wait
  2585                           
  2586                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  2587     0251  1591               	bsf	17,3	;volatile
  2588                           
  2589                           ;I2C.c: 79:     I2C_Master_Wait();
  2590     0252  120A  118A  217C  120A  118A  	fcall	_I2C_Master_Wait
  2591                           
  2592                           ;I2C.c: 80:     temp = SSPBUF;
  2593     0257  1283               	bcf	3,5	;RP0=0, select bank0
  2594     0258  0813               	movf	19,w	;volatile
  2595     0259  00F2               	movwf	??_I2C_Master_Read
  2596     025A  01F3               	clrf	??_I2C_Master_Read+1
  2597     025B  0872               	movf	??_I2C_Master_Read,w
  2598     025C  00F4               	movwf	I2C_Master_Read@temp
  2599     025D  0873               	movf	??_I2C_Master_Read+1,w
  2600     025E  00F5               	movwf	I2C_Master_Read@temp+1
  2601                           
  2602                           ;I2C.c: 81:     I2C_Master_Wait();
  2603     025F  120A  118A  217C  120A  118A  	fcall	_I2C_Master_Wait
  2604                           
  2605                           ;I2C.c: 82:     if(a == 1){
  2606     0264  0370               	decf	I2C_Master_Read@a,w
  2607     0265  0471               	iorwf	I2C_Master_Read@a+1,w
  2608     0266  1D03               	btfss	3,2
  2609     0267  2A6A               	goto	l194
  2610                           
  2611                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  2612     0268  1291               	bcf	17,5	;volatile
  2613                           
  2614                           ;I2C.c: 84:     }else{
  2615     0269  2A6B               	goto	l195
  2616     026A                     l194:
  2617                           
  2618                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  2619     026A  1691               	bsf	17,5	;volatile
  2620     026B                     l195:	
  2621                           ;I2C.c: 86:     }
  2622                           
  2623                           
  2624                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  2625     026B  1611               	bsf	17,4	;volatile
  2626                           
  2627                           ;I2C.c: 88:     return temp;
  2628     026C  0875               	movf	I2C_Master_Read@temp+1,w
  2629     026D  00F1               	movwf	?_I2C_Master_Read+1
  2630     026E  0874               	movf	I2C_Master_Read@temp,w
  2631     026F  00F0               	movwf	?_I2C_Master_Read
  2632     0270  0008               	return
  2633     0271                     __end_of_I2C_Master_Read:
  2634                           
  2635                           	psect	text11
  2636     048C                     __ptext11:	
  2637 ;; *************** function _Escribir_dato *****************
  2638 ;; Defined at:
  2639 ;;		line 251 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  dato            1    wreg     unsigned char 
  2642 ;;  posx            1   12[COMMON] unsigned char 
  2643 ;;  posy            1   13[COMMON] unsigned char 
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;  dato            1    0[BANK0 ] unsigned char 
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  1    wreg      void 
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0, pclath, cstack
  2650 ;; Tracked objects:
  2651 ;;		On entry : 200/0
  2652 ;;		On exit  : 300/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2655 ;;      Params:         2       0       0       0       0
  2656 ;;      Locals:         0       1       0       0       0
  2657 ;;      Temps:          0       0       0       0       0
  2658 ;;      Totals:         2       1       0       0       0
  2659 ;;Total ram usage:        3 bytes
  2660 ;; Hardware stack levels used: 1
  2661 ;; Hardware stack levels required when called: 3
  2662 ;; This function calls:
  2663 ;;		_Lcd_Set_Cursor
  2664 ;;		_Lcd_Write_Char
  2665 ;;		_descomponer
  2666 ;;		_inttochar
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;;		_leer_temperatura
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673     048C                     _Escribir_dato:	
  2674                           ;psect for function _Escribir_dato
  2675                           
  2676                           
  2677                           ;incstack = 0
  2678                           ; Regs used in _Escribir_dato: [wreg+status,2+status,0+pclath+cstack]
  2679                           ;Escribir_dato@dato stored from wreg
  2680     048C  1283               	bcf	3,5	;RP0=0, select bank0
  2681     048D  00B3               	movwf	Escribir_dato@dato
  2682                           
  2683                           ;main.c: 252:     Lcd_Set_Cursor(posy, posx+1);
  2684     048E  087C               	movf	Escribir_dato@posx,w
  2685     048F  3E01               	addlw	1
  2686     0490  00F4               	movwf	Lcd_Set_Cursor@b
  2687     0491  087D               	movf	Escribir_dato@posy,w
  2688     0492  120A  118A  23C9  120A  118A  	fcall	_Lcd_Set_Cursor
  2689                           
  2690                           ;main.c: 253:     unidad = inttochar(descomponer(0, dato));
  2691     0497  3000               	movlw	0
  2692     0498  00F6               	movwf	descomponer@pos
  2693     0499  00F7               	movwf	descomponer@pos+1
  2694     049A  1283               	bcf	3,5	;RP0=0, select bank0
  2695     049B  1303               	bcf	3,6	;RP1=0, select bank0
  2696     049C  0833               	movf	Escribir_dato@dato,w
  2697     049D  00F8               	movwf	descomponer@num
  2698     049E  120A  118A  235B  120A  118A  	fcall	_descomponer
  2699     04A3  120A  118A  238E  120A  118A  	fcall	_inttochar
  2700     04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2701     04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2702     04AA  00B2               	movwf	_unidad
  2703                           
  2704                           ;main.c: 254:     Lcd_Write_Char(unidad);
  2705     04AB  0832               	movf	_unidad,w
  2706     04AC  120A  118A  22C6  120A  118A  	fcall	_Lcd_Write_Char
  2707                           
  2708                           ;main.c: 255:     Lcd_Set_Cursor(posy, posx);
  2709     04B1  087C               	movf	Escribir_dato@posx,w
  2710     04B2  00F4               	movwf	Lcd_Set_Cursor@b
  2711     04B3  087D               	movf	Escribir_dato@posy,w
  2712     04B4  120A  118A  23C9  120A  118A  	fcall	_Lcd_Set_Cursor
  2713                           
  2714                           ;main.c: 256:     decena = inttochar(descomponer(1, dato));
  2715     04B9  3001               	movlw	1
  2716     04BA  00F6               	movwf	descomponer@pos
  2717     04BB  3000               	movlw	0
  2718     04BC  00F7               	movwf	descomponer@pos+1
  2719     04BD  1283               	bcf	3,5	;RP0=0, select bank0
  2720     04BE  1303               	bcf	3,6	;RP1=0, select bank0
  2721     04BF  0833               	movf	Escribir_dato@dato,w
  2722     04C0  00F8               	movwf	descomponer@num
  2723     04C1  120A  118A  235B  120A  118A  	fcall	_descomponer
  2724     04C6  120A  118A  238E  120A  118A  	fcall	_inttochar
  2725     04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2726     04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2727     04CD  00B1               	movwf	_decena
  2728                           
  2729                           ;main.c: 257:     Lcd_Write_Char(decena);
  2730     04CE  0831               	movf	_decena,w
  2731     04CF  120A  118A  22C6   	fcall	_Lcd_Write_Char
  2732     04D2  0008               	return
  2733     04D3                     __end_of_Escribir_dato:
  2734                           
  2735                           	psect	text12
  2736     038E                     __ptext12:	
  2737 ;; *************** function _inttochar *****************
  2738 ;; Defined at:
  2739 ;;		line 12 in file "conversiones.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  num             1    wreg     unsigned char 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  num             1    0[COMMON] unsigned char 
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      unsigned char 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2753 ;;      Params:         0       0       0       0       0
  2754 ;;      Locals:         1       0       0       0       0
  2755 ;;      Temps:          0       0       0       0       0
  2756 ;;      Totals:         1       0       0       0       0
  2757 ;;Total ram usage:        1 bytes
  2758 ;; Hardware stack levels used: 1
  2759 ;; This function calls:
  2760 ;;		Nothing
  2761 ;; This function is called by:
  2762 ;;		_Escribir_dato
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766     038E                     _inttochar:	
  2767                           ;psect for function _inttochar
  2768                           
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _inttochar: [wreg+status,2+status,0]
  2772                           ;inttochar@num stored from wreg
  2773     038E  00F0               	movwf	inttochar@num
  2774                           
  2775                           ;conversiones.c: 13:     if(num == 0){
  2776     038F  0870               	movf	inttochar@num,w
  2777     0390  1D03               	btfss	3,2
  2778     0391  2B94               	goto	l1526
  2779                           
  2780                           ;conversiones.c: 14:         return '0';
  2781     0392  3030               	movlw	48
  2782     0393  0008               	return
  2783     0394                     l1526:
  2784     0394  0370               	decf	inttochar@num,w
  2785     0395  1D03               	btfss	3,2
  2786     0396  2B99               	goto	l1534
  2787                           
  2788                           ;conversiones.c: 17:         return '1';
  2789     0397  3031               	movlw	49
  2790     0398  0008               	return
  2791     0399                     l1534:
  2792     0399  3002               	movlw	2
  2793     039A  0670               	xorwf	inttochar@num,w
  2794     039B  1D03               	btfss	3,2
  2795     039C  2B9F               	goto	l1542
  2796                           
  2797                           ;conversiones.c: 20:         return '2';
  2798     039D  3032               	movlw	50
  2799     039E  0008               	return
  2800     039F                     l1542:
  2801     039F  3003               	movlw	3
  2802     03A0  0670               	xorwf	inttochar@num,w
  2803     03A1  1D03               	btfss	3,2
  2804     03A2  2BA5               	goto	l1550
  2805                           
  2806                           ;conversiones.c: 23:         return '3';
  2807     03A3  3033               	movlw	51
  2808     03A4  0008               	return
  2809     03A5                     l1550:
  2810     03A5  3004               	movlw	4
  2811     03A6  0670               	xorwf	inttochar@num,w
  2812     03A7  1D03               	btfss	3,2
  2813     03A8  2BAB               	goto	l1558
  2814                           
  2815                           ;conversiones.c: 26:         return '4';
  2816     03A9  3034               	movlw	52
  2817     03AA  0008               	return
  2818     03AB                     l1558:
  2819     03AB  3005               	movlw	5
  2820     03AC  0670               	xorwf	inttochar@num,w
  2821     03AD  1D03               	btfss	3,2
  2822     03AE  2BB1               	goto	l1566
  2823                           
  2824                           ;conversiones.c: 29:         return '5';
  2825     03AF  3035               	movlw	53
  2826     03B0  0008               	return
  2827     03B1                     l1566:
  2828     03B1  3006               	movlw	6
  2829     03B2  0670               	xorwf	inttochar@num,w
  2830     03B3  1D03               	btfss	3,2
  2831     03B4  2BB7               	goto	l1574
  2832                           
  2833                           ;conversiones.c: 32:         return '6';
  2834     03B5  3036               	movlw	54
  2835     03B6  0008               	return
  2836     03B7                     l1574:
  2837     03B7  3007               	movlw	7
  2838     03B8  0670               	xorwf	inttochar@num,w
  2839     03B9  1D03               	btfss	3,2
  2840     03BA  2BBD               	goto	l1582
  2841                           
  2842                           ;conversiones.c: 35:         return '7';
  2843     03BB  3037               	movlw	55
  2844     03BC  0008               	return
  2845     03BD                     l1582:
  2846     03BD  3008               	movlw	8
  2847     03BE  0670               	xorwf	inttochar@num,w
  2848     03BF  1D03               	btfss	3,2
  2849     03C0  2BC3               	goto	l1590
  2850                           
  2851                           ;conversiones.c: 38:         return '8';
  2852     03C1  3038               	movlw	56
  2853     03C2  0008               	return
  2854     03C3                     l1590:
  2855     03C3  3009               	movlw	9
  2856     03C4  0670               	xorwf	inttochar@num,w
  2857     03C5  1D03               	btfss	3,2
  2858     03C6  0008               	return
  2859                           
  2860                           ;conversiones.c: 41:         return '9';
  2861     03C7  3039               	movlw	57
  2862     03C8  0008               	return
  2863     03C9                     __end_of_inttochar:
  2864                           
  2865                           	psect	text13
  2866     035B                     __ptext13:	
  2867 ;; *************** function _descomponer *****************
  2868 ;; Defined at:
  2869 ;;		line 45 in file "conversiones.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  pos             2    6[COMMON] int 
  2872 ;;  num             1    8[COMMON] unsigned char 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  dec             1   11[COMMON] unsigned char 
  2875 ;;  uni             1   10[COMMON] unsigned char 
  2876 ;;  cent            1    9[COMMON] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      unsigned char 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0, pclath, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 300/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2886 ;;      Params:         3       0       0       0       0
  2887 ;;      Locals:         3       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0
  2889 ;;      Totals:         6       0       0       0       0
  2890 ;;Total ram usage:        6 bytes
  2891 ;; Hardware stack levels used: 1
  2892 ;; Hardware stack levels required when called: 1
  2893 ;; This function calls:
  2894 ;;		___lbdiv
  2895 ;;		___lbmod
  2896 ;; This function is called by:
  2897 ;;		_Escribir_dato
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901     035B                     _descomponer:	
  2902                           ;psect for function _descomponer
  2903                           
  2904                           
  2905                           ;conversiones.c: 46:     uint8_t cent;;conversiones.c: 47:     uint8_t dec;;conversiones
      +                          .c: 48:     uint8_t uni;;conversiones.c: 49:     cent = (num/100);
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _descomponer: [wreg+status,2+status,0+pclath+cstack]
  2909     035B  3064               	movlw	100
  2910     035C  00F0               	movwf	___lbdiv@divisor
  2911     035D  0878               	movf	descomponer@num,w
  2912     035E  120A  118A  2209  120A  118A  	fcall	___lbdiv
  2913     0363  00F9               	movwf	descomponer@cent
  2914                           
  2915                           ;conversiones.c: 50:     dec = (num%100);
  2916     0364  3064               	movlw	100
  2917     0365  00F0               	movwf	___lbmod@divisor
  2918     0366  0878               	movf	descomponer@num,w
  2919     0367  120A  118A  21EA  120A  118A  	fcall	___lbmod
  2920     036C  00FB               	movwf	descomponer@dec
  2921                           
  2922                           ;conversiones.c: 51:     uni = (dec%10);
  2923     036D  300A               	movlw	10
  2924     036E  00F0               	movwf	___lbmod@divisor
  2925     036F  087B               	movf	descomponer@dec,w
  2926     0370  120A  118A  21EA  120A  118A  	fcall	___lbmod
  2927     0375  00FA               	movwf	descomponer@uni
  2928                           
  2929                           ;conversiones.c: 52:     if(pos == 2){
  2930     0376  3002               	movlw	2
  2931     0377  0676               	xorwf	descomponer@pos,w
  2932     0378  0477               	iorwf	descomponer@pos+1,w
  2933     0379  1D03               	btfss	3,2
  2934     037A  2B7D               	goto	l1504
  2935                           
  2936                           ;conversiones.c: 53:         return cent;
  2937     037B  0879               	movf	descomponer@cent,w
  2938     037C  0008               	return
  2939     037D                     l1504:
  2940     037D  0376               	decf	descomponer@pos,w
  2941     037E  0477               	iorwf	descomponer@pos+1,w
  2942     037F  1D03               	btfss	3,2
  2943     0380  2B88               	goto	l1512
  2944                           
  2945                           ;conversiones.c: 56:         return (dec/10);
  2946     0381  300A               	movlw	10
  2947     0382  00F0               	movwf	___lbdiv@divisor
  2948     0383  087B               	movf	descomponer@dec,w
  2949     0384  120A  118A  2209   	fcall	___lbdiv
  2950     0387  0008               	return
  2951     0388                     l1512:
  2952     0388  0876               	movf	descomponer@pos,w
  2953     0389  0477               	iorwf	descomponer@pos+1,w
  2954     038A  1D03               	btfss	3,2
  2955     038B  0008               	return
  2956                           
  2957                           ;conversiones.c: 59:         return uni;
  2958     038C  087A               	movf	descomponer@uni,w
  2959     038D  0008               	return
  2960     038E                     __end_of_descomponer:
  2961                           
  2962                           	psect	text14
  2963     01EA                     __ptext14:	
  2964 ;; *************** function ___lbmod *****************
  2965 ;; Defined at:
  2966 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lbmod.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  dividend        1    wreg     unsigned char 
  2969 ;;  divisor         1    0[COMMON] unsigned char 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  dividend        1    3[COMMON] unsigned char 
  2972 ;;  rem             1    5[COMMON] unsigned char 
  2973 ;;  counter         1    4[COMMON] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      unsigned char 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2983 ;;      Params:         1       0       0       0       0
  2984 ;;      Locals:         3       0       0       0       0
  2985 ;;      Temps:          2       0       0       0       0
  2986 ;;      Totals:         6       0       0       0       0
  2987 ;;Total ram usage:        6 bytes
  2988 ;; Hardware stack levels used: 1
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_descomponer
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996     01EA                     ___lbmod:	
  2997                           ;psect for function ___lbmod
  2998                           
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3002                           ;___lbmod@dividend stored from wreg
  3003     01EA  00F3               	movwf	___lbmod@dividend
  3004     01EB  3008               	movlw	8
  3005     01EC  00F4               	movwf	___lbmod@counter
  3006     01ED  01F5               	clrf	___lbmod@rem
  3007     01EE                     l1442:
  3008     01EE  0873               	movf	___lbmod@dividend,w
  3009     01EF  00F1               	movwf	??___lbmod
  3010     01F0  3007               	movlw	7
  3011     01F1                     u815:
  3012     01F1  1003               	clrc
  3013     01F2  0CF1               	rrf	??___lbmod,f
  3014     01F3  3EFF               	addlw	-1
  3015     01F4  1D03               	skipz
  3016     01F5  29F1               	goto	u815
  3017     01F6  0875               	movf	___lbmod@rem,w
  3018     01F7  00F2               	movwf	??___lbmod+1
  3019     01F8  0772               	addwf	??___lbmod+1,w
  3020     01F9  0471               	iorwf	??___lbmod,w
  3021     01FA  00F5               	movwf	___lbmod@rem
  3022     01FB  1003               	clrc
  3023     01FC  0DF3               	rlf	___lbmod@dividend,f
  3024     01FD  0870               	movf	___lbmod@divisor,w
  3025     01FE  0275               	subwf	___lbmod@rem,w
  3026     01FF  1C03               	skipc
  3027     0200  2A03               	goto	l584
  3028     0201  0870               	movf	___lbmod@divisor,w
  3029     0202  02F5               	subwf	___lbmod@rem,f
  3030     0203                     l584:
  3031     0203  3001               	movlw	1
  3032     0204  02F4               	subwf	___lbmod@counter,f
  3033     0205  1D03               	btfss	3,2
  3034     0206  29EE               	goto	l1442
  3035     0207  0875               	movf	___lbmod@rem,w
  3036     0208  0008               	return
  3037     0209                     __end_of___lbmod:
  3038                           
  3039                           	psect	text15
  3040     0209                     __ptext15:	
  3041 ;; *************** function ___lbdiv *****************
  3042 ;; Defined at:
  3043 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lbdiv.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  dividend        1    wreg     unsigned char 
  3046 ;;  divisor         1    0[COMMON] unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  dividend        1    2[COMMON] unsigned char 
  3049 ;;  quotient        1    4[COMMON] unsigned char 
  3050 ;;  counter         1    3[COMMON] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      unsigned char 
  3053 ;; Registers used:
  3054 ;;		wreg, status,2, status,0
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3060 ;;      Params:         1       0       0       0       0
  3061 ;;      Locals:         3       0       0       0       0
  3062 ;;      Temps:          1       0       0       0       0
  3063 ;;      Totals:         5       0       0       0       0
  3064 ;;Total ram usage:        5 bytes
  3065 ;; Hardware stack levels used: 1
  3066 ;; This function calls:
  3067 ;;		Nothing
  3068 ;; This function is called by:
  3069 ;;		_descomponer
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073     0209                     ___lbdiv:	
  3074                           ;psect for function ___lbdiv
  3075                           
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3079                           ;___lbdiv@dividend stored from wreg
  3080     0209  00F2               	movwf	___lbdiv@dividend
  3081     020A  01F4               	clrf	___lbdiv@quotient
  3082     020B  0870               	movf	___lbdiv@divisor,w
  3083     020C  1903               	btfsc	3,2
  3084     020D  2A28               	goto	l1434
  3085     020E  01F3               	clrf	___lbdiv@counter
  3086     020F  0AF3               	incf	___lbdiv@counter,f
  3087     0210                     l1422:
  3088     0210  1BF0               	btfsc	___lbdiv@divisor,7
  3089     0211  2A19               	goto	l1424
  3090     0212  1003               	clrc
  3091     0213  0DF0               	rlf	___lbdiv@divisor,f
  3092     0214  3001               	movlw	1
  3093     0215  00F1               	movwf	??___lbdiv
  3094     0216  0871               	movf	??___lbdiv,w
  3095     0217  07F3               	addwf	___lbdiv@counter,f
  3096     0218  2A10               	goto	l1422
  3097     0219                     l1424:
  3098     0219  1003               	clrc
  3099     021A  0DF4               	rlf	___lbdiv@quotient,f
  3100     021B  0870               	movf	___lbdiv@divisor,w
  3101     021C  0272               	subwf	___lbdiv@dividend,w
  3102     021D  1C03               	skipc
  3103     021E  2A23               	goto	L2
  3104     021F  0870               	movf	___lbdiv@divisor,w
  3105     0220  02F2               	subwf	___lbdiv@dividend,f
  3106     0221  1474               	bsf	___lbdiv@quotient,0
  3107     0222  1003               	clrc
  3108     0223                     L2:
  3109     0223  0CF0               	rrf	___lbdiv@divisor,f
  3110     0224  3001               	movlw	1
  3111     0225  02F3               	subwf	___lbdiv@counter,f
  3112     0226  1D03               	btfss	3,2
  3113     0227  2A19               	goto	l1424
  3114     0228                     l1434:
  3115     0228  0874               	movf	___lbdiv@quotient,w
  3116     0229  0008               	return
  3117     022A                     __end_of___lbdiv:
  3118                           
  3119                           	psect	text16
  3120     03C9                     __ptext16:	
  3121 ;; *************** function _Lcd_Set_Cursor *****************
  3122 ;; Defined at:
  3123 ;;		line 48 in file "LCD.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;  a               1    wreg     unsigned char 
  3126 ;;  b               1    4[COMMON] unsigned char 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  a               1    6[COMMON] unsigned char 
  3129 ;;  temp            1    9[COMMON] unsigned char 
  3130 ;;  y               1    8[COMMON] unsigned char 
  3131 ;;  z               1    7[COMMON] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3141 ;;      Params:         1       0       0       0       0
  3142 ;;      Locals:         4       0       0       0       0
  3143 ;;      Temps:          1       0       0       0       0
  3144 ;;      Totals:         6       0       0       0       0
  3145 ;;Total ram usage:        6 bytes
  3146 ;; Hardware stack levels used: 1
  3147 ;; Hardware stack levels required when called: 2
  3148 ;; This function calls:
  3149 ;;		_Lcd_Cmd
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;;		_Escribir_dato
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156     03C9                     _Lcd_Set_Cursor:	
  3157                           ;psect for function _Lcd_Set_Cursor
  3158                           
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3162                           ;Lcd_Set_Cursor@a stored from wreg
  3163     03C9  00F6               	movwf	Lcd_Set_Cursor@a
  3164                           
  3165                           ;LCD.c: 49:     char temp, z, y;;LCD.c: 50:     if (a == 1) {
  3166     03CA  0376               	decf	Lcd_Set_Cursor@a,w
  3167     03CB  1D03               	btfss	3,2
  3168     03CC  2BE8               	goto	l1464
  3169                           
  3170                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  3171     03CD  0874               	movf	Lcd_Set_Cursor@b,w
  3172     03CE  3E7F               	addlw	127
  3173     03CF  00F9               	movwf	Lcd_Set_Cursor@temp
  3174                           
  3175                           ;LCD.c: 52:         z = temp >> 4;
  3176     03D0  0879               	movf	Lcd_Set_Cursor@temp,w
  3177     03D1  00F5               	movwf	??_Lcd_Set_Cursor
  3178     03D2  3004               	movlw	4
  3179     03D3                     u855:
  3180     03D3  1003               	clrc
  3181     03D4  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3182     03D5  3EFF               	addlw	-1
  3183     03D6  1D03               	skipz
  3184     03D7  2BD3               	goto	u855
  3185     03D8  0875               	movf	??_Lcd_Set_Cursor,w
  3186     03D9  00F7               	movwf	Lcd_Set_Cursor@z
  3187                           
  3188                           ;LCD.c: 53:         y = temp & 0x0F;
  3189     03DA  0879               	movf	Lcd_Set_Cursor@temp,w
  3190     03DB  390F               	andlw	15
  3191     03DC  00F8               	movwf	Lcd_Set_Cursor@y
  3192                           
  3193                           ;LCD.c: 54:         Lcd_Cmd(z);
  3194     03DD  0877               	movf	Lcd_Set_Cursor@z,w
  3195     03DE  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3196                           
  3197                           ;LCD.c: 55:         Lcd_Cmd(y);
  3198     03E3  0878               	movf	Lcd_Set_Cursor@y,w
  3199     03E4  120A  118A  21B9   	fcall	_Lcd_Cmd
  3200                           
  3201                           ;LCD.c: 56:     } else if (a == 2) {
  3202     03E7  0008               	return
  3203     03E8                     l1464:
  3204     03E8  3002               	movlw	2
  3205     03E9  0676               	xorwf	Lcd_Set_Cursor@a,w
  3206     03EA  1D03               	btfss	3,2
  3207     03EB  0008               	return
  3208                           
  3209                           ;LCD.c: 57:         temp = 0xC0 + b - 1;
  3210     03EC  0874               	movf	Lcd_Set_Cursor@b,w
  3211     03ED  3EBF               	addlw	191
  3212     03EE  00F9               	movwf	Lcd_Set_Cursor@temp
  3213                           
  3214                           ;LCD.c: 58:         z = temp >> 4;
  3215     03EF  0879               	movf	Lcd_Set_Cursor@temp,w
  3216     03F0  00F5               	movwf	??_Lcd_Set_Cursor
  3217     03F1  3004               	movlw	4
  3218     03F2                     u875:
  3219     03F2  1003               	clrc
  3220     03F3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3221     03F4  3EFF               	addlw	-1
  3222     03F5  1D03               	skipz
  3223     03F6  2BF2               	goto	u875
  3224     03F7  0875               	movf	??_Lcd_Set_Cursor,w
  3225     03F8  00F7               	movwf	Lcd_Set_Cursor@z
  3226                           
  3227                           ;LCD.c: 59:         y = temp & 0x0F;
  3228     03F9  0879               	movf	Lcd_Set_Cursor@temp,w
  3229     03FA  390F               	andlw	15
  3230     03FB  00F8               	movwf	Lcd_Set_Cursor@y
  3231                           
  3232                           ;LCD.c: 60:         Lcd_Cmd(z);
  3233     03FC  0877               	movf	Lcd_Set_Cursor@z,w
  3234     03FD  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3235                           
  3236                           ;LCD.c: 61:         Lcd_Cmd(y);
  3237     0402  0878               	movf	Lcd_Set_Cursor@y,w
  3238     0403  120A  118A  21B9   	fcall	_Lcd_Cmd
  3239     0406  0008               	return
  3240     0407                     __end_of_Lcd_Set_Cursor:
  3241                           
  3242                           	psect	text17
  3243     058C                     __ptext17:	
  3244 ;; *************** function _envio_ESP *****************
  3245 ;; Defined at:
  3246 ;;		line 269 in file "main.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3260 ;;      Params:         0       0       0       0       0
  3261 ;;      Locals:         0       0       0       0       0
  3262 ;;      Temps:          2       0       0       0       0
  3263 ;;      Totals:         2       0       0       0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 2
  3267 ;; This function calls:
  3268 ;;		_I2C_Master_Start
  3269 ;;		_I2C_Master_Stop
  3270 ;;		_I2C_Master_Write
  3271 ;; This function is called by:
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276     058C                     _envio_ESP:	
  3277                           ;psect for function _envio_ESP
  3278                           
  3279                           
  3280                           ;main.c: 270:     I2C_Master_Start();
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _envio_ESP: [wreg+status,2+status,0+pclath+cstack]
  3284     058C  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  3285                           
  3286                           ;main.c: 271:     I2C_Master_Write(0x90);
  3287     0591  3090               	movlw	144
  3288     0592  00F0               	movwf	I2C_Master_Write@d
  3289     0593  3000               	movlw	0
  3290     0594  00F1               	movwf	I2C_Master_Write@d+1
  3291     0595  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3292                           
  3293                           ;main.c: 272:     I2C_Master_Write(tempint);
  3294     059A  0830               	movf	_tempint,w
  3295     059B  00F2               	movwf	??_envio_ESP
  3296     059C  01F3               	clrf	??_envio_ESP+1
  3297     059D  0872               	movf	??_envio_ESP,w
  3298     059E  00F0               	movwf	I2C_Master_Write@d
  3299     059F  0873               	movf	??_envio_ESP+1,w
  3300     05A0  00F1               	movwf	I2C_Master_Write@d+1
  3301     05A1  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3302                           
  3303                           ;main.c: 273:     I2C_Master_Write(10);
  3304     05A6  300A               	movlw	10
  3305     05A7  00F0               	movwf	I2C_Master_Write@d
  3306     05A8  3000               	movlw	0
  3307     05A9  00F1               	movwf	I2C_Master_Write@d+1
  3308     05AA  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3309                           
  3310                           ;main.c: 274:     I2C_Master_Write(min);
  3311     05AF  082D               	movf	_min,w
  3312     05B0  00F2               	movwf	??_envio_ESP
  3313     05B1  01F3               	clrf	??_envio_ESP+1
  3314     05B2  0872               	movf	??_envio_ESP,w
  3315     05B3  00F0               	movwf	I2C_Master_Write@d
  3316     05B4  0873               	movf	??_envio_ESP+1,w
  3317     05B5  00F1               	movwf	I2C_Master_Write@d+1
  3318     05B6  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3319                           
  3320                           ;main.c: 275:     I2C_Master_Write(sec);
  3321     05BB  082F               	movf	_sec,w
  3322     05BC  00F2               	movwf	??_envio_ESP
  3323     05BD  01F3               	clrf	??_envio_ESP+1
  3324     05BE  0872               	movf	??_envio_ESP,w
  3325     05BF  00F0               	movwf	I2C_Master_Write@d
  3326     05C0  0873               	movf	??_envio_ESP+1,w
  3327     05C1  00F1               	movwf	I2C_Master_Write@d+1
  3328     05C2  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3329                           
  3330                           ;main.c: 276:     I2C_Master_Write(minutos);
  3331     05C7  082C               	movf	_minutos,w
  3332     05C8  00F2               	movwf	??_envio_ESP
  3333     05C9  01F3               	clrf	??_envio_ESP+1
  3334     05CA  0872               	movf	??_envio_ESP,w
  3335     05CB  00F0               	movwf	I2C_Master_Write@d
  3336     05CC  0873               	movf	??_envio_ESP+1,w
  3337     05CD  00F1               	movwf	I2C_Master_Write@d+1
  3338     05CE  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3339                           
  3340                           ;main.c: 277:     I2C_Master_Write(segundos);
  3341     05D3  082E               	movf	_segundos,w
  3342     05D4  00F2               	movwf	??_envio_ESP
  3343     05D5  01F3               	clrf	??_envio_ESP+1
  3344     05D6  0872               	movf	??_envio_ESP,w
  3345     05D7  00F0               	movwf	I2C_Master_Write@d
  3346     05D8  0873               	movf	??_envio_ESP+1,w
  3347     05D9  00F1               	movwf	I2C_Master_Write@d+1
  3348     05DA  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3349                           
  3350                           ;main.c: 278:     I2C_Master_Stop();
  3351     05DF  120A  118A  2163  120A  118A  	fcall	_I2C_Master_Stop
  3352                           
  3353                           ;main.c: 279:     _delay((unsigned long)((10)*(8000000/4000.0)));
  3354     05E4  301A               	movlw	26
  3355     05E5  00F3               	movwf	??_envio_ESP+1
  3356     05E6  30F8               	movlw	248
  3357     05E7  00F2               	movwf	??_envio_ESP
  3358     05E8                     u1487:
  3359     05E8  0BF2               	decfsz	??_envio_ESP,f
  3360     05E9  2DE8               	goto	u1487
  3361     05EA  0BF3               	decfsz	??_envio_ESP+1,f
  3362     05EB  2DE8               	goto	u1487
  3363     05EC  0000               	nop
  3364     05ED  0008               	return
  3365     05EE                     __end_of_envio_ESP:
  3366                           
  3367                           	psect	text18
  3368     0328                     __ptext18:	
  3369 ;; *************** function _enviar_x *****************
  3370 ;; Defined at:
  3371 ;;		line 38 in file "DS3231.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  val1            1    wreg     unsigned char 
  3374 ;;  val2            1    2[COMMON] unsigned char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  val1            1    5[COMMON] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, pclath, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 300/0
  3383 ;;		On exit  : 300/100
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3386 ;;      Params:         1       0       0       0       0
  3387 ;;      Locals:         1       0       0       0       0
  3388 ;;      Temps:          2       0       0       0       0
  3389 ;;      Totals:         4       0       0       0       0
  3390 ;;Total ram usage:        4 bytes
  3391 ;; Hardware stack levels used: 1
  3392 ;; Hardware stack levels required when called: 2
  3393 ;; This function calls:
  3394 ;;		_I2C_Master_Start
  3395 ;;		_I2C_Master_Stop
  3396 ;;		_I2C_Master_Write
  3397 ;; This function is called by:
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402     0328                     _enviar_x:	
  3403                           ;psect for function _enviar_x
  3404                           
  3405                           
  3406                           ;incstack = 0
  3407                           ; Regs used in _enviar_x: [wreg+status,2+status,0+pclath+cstack]
  3408                           ;enviar_x@val1 stored from wreg
  3409     0328  00F5               	movwf	enviar_x@val1
  3410                           
  3411                           ;DS3231.c: 39:     I2C_Master_Start();
  3412     0329  120A  118A  215E  120A  118A  	fcall	_I2C_Master_Start
  3413                           
  3414                           ;DS3231.c: 40:     I2C_Master_Write(0xD0);
  3415     032E  30D0               	movlw	208
  3416     032F  00F0               	movwf	I2C_Master_Write@d
  3417     0330  3000               	movlw	0
  3418     0331  00F1               	movwf	I2C_Master_Write@d+1
  3419     0332  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3420                           
  3421                           ;DS3231.c: 41:     I2C_Master_Write(0);
  3422     0337  3000               	movlw	0
  3423     0338  00F0               	movwf	I2C_Master_Write@d
  3424     0339  00F1               	movwf	I2C_Master_Write@d+1
  3425     033A  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3426                           
  3427                           ;DS3231.c: 42:     I2C_Master_Write(val1);
  3428     033F  0875               	movf	enviar_x@val1,w
  3429     0340  00F3               	movwf	??_enviar_x
  3430     0341  01F4               	clrf	??_enviar_x+1
  3431     0342  0873               	movf	??_enviar_x,w
  3432     0343  00F0               	movwf	I2C_Master_Write@d
  3433     0344  0874               	movf	??_enviar_x+1,w
  3434     0345  00F1               	movwf	I2C_Master_Write@d+1
  3435     0346  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3436                           
  3437                           ;DS3231.c: 43:     I2C_Master_Write(val2);
  3438     034B  0872               	movf	enviar_x@val2,w
  3439     034C  00F3               	movwf	??_enviar_x
  3440     034D  01F4               	clrf	??_enviar_x+1
  3441     034E  0873               	movf	??_enviar_x,w
  3442     034F  00F0               	movwf	I2C_Master_Write@d
  3443     0350  0874               	movf	??_enviar_x+1,w
  3444     0351  00F1               	movwf	I2C_Master_Write@d+1
  3445     0352  120A  118A  216D  120A  118A  	fcall	_I2C_Master_Write
  3446                           
  3447                           ;DS3231.c: 44:     I2C_Master_Stop();
  3448     0357  120A  118A  2163   	fcall	_I2C_Master_Stop
  3449     035A  0008               	return
  3450     035B                     __end_of_enviar_x:
  3451                           
  3452                           	psect	text19
  3453     016D                     __ptext19:	
  3454 ;; *************** function _I2C_Master_Write *****************
  3455 ;; Defined at:
  3456 ;;		line 65 in file "I2C.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  d               2    0[COMMON] unsigned int 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0, pclath, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 200/100
  3467 ;;		On exit  : 300/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3470 ;;      Params:         2       0       0       0       0
  3471 ;;      Locals:         0       0       0       0       0
  3472 ;;      Temps:          0       0       0       0       0
  3473 ;;      Totals:         2       0       0       0       0
  3474 ;;Total ram usage:        2 bytes
  3475 ;; Hardware stack levels used: 1
  3476 ;; Hardware stack levels required when called: 1
  3477 ;; This function calls:
  3478 ;;		_I2C_Master_Wait
  3479 ;; This function is called by:
  3480 ;;		_main
  3481 ;;		_leer_temperatura
  3482 ;;		_envio_ESP
  3483 ;;		_leer_x
  3484 ;;		_enviar_x
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488     016D                     _I2C_Master_Write:	
  3489                           ;psect for function _I2C_Master_Write
  3490                           
  3491                           
  3492                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3496     016D  120A  118A  217C   	fcall	_I2C_Master_Wait
  3497                           
  3498                           ;I2C.c: 68:     SSPBUF = d;
  3499     0170  0870               	movf	I2C_Master_Write@d,w
  3500     0171  1283               	bcf	3,5	;RP0=0, select bank0
  3501     0172  0093               	movwf	19	;volatile
  3502     0173  0008               	return
  3503     0174                     __end_of_I2C_Master_Write:
  3504                           
  3505                           	psect	text20
  3506     0163                     __ptext20:	
  3507 ;; *************** function _I2C_Master_Stop *****************
  3508 ;; Defined at:
  3509 ;;		line 55 in file "I2C.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;		None
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, pclath, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 200/0
  3520 ;;		On exit  : 300/100
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3523 ;;      Params:         0       0       0       0       0
  3524 ;;      Locals:         0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0
  3526 ;;      Totals:         0       0       0       0       0
  3527 ;;Total ram usage:        0 bytes
  3528 ;; Hardware stack levels used: 1
  3529 ;; Hardware stack levels required when called: 1
  3530 ;; This function calls:
  3531 ;;		_I2C_Master_Wait
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;;		_leer_temperatura
  3535 ;;		_envio_ESP
  3536 ;;		_leer_x
  3537 ;;		_enviar_x
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541     0163                     _I2C_Master_Stop:	
  3542                           ;psect for function _I2C_Master_Stop
  3543                           
  3544                           
  3545                           ;I2C.c: 57:     I2C_Master_Wait();
  3546                           
  3547                           ;incstack = 0
  3548                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3549     0163  120A  118A  217C   	fcall	_I2C_Master_Wait
  3550                           
  3551                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  3552     0166  1511               	bsf	17,2	;volatile
  3553     0167  0008               	return
  3554     0168                     __end_of_I2C_Master_Stop:
  3555                           
  3556                           	psect	text21
  3557     015E                     __ptext21:	
  3558 ;; *************** function _I2C_Master_Start *****************
  3559 ;; Defined at:
  3560 ;;		line 39 in file "I2C.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;		None
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;		None
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      void 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0, pclath, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 300/100
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3574 ;;      Params:         0       0       0       0       0
  3575 ;;      Locals:         0       0       0       0       0
  3576 ;;      Temps:          0       0       0       0       0
  3577 ;;      Totals:         0       0       0       0       0
  3578 ;;Total ram usage:        0 bytes
  3579 ;; Hardware stack levels used: 1
  3580 ;; Hardware stack levels required when called: 1
  3581 ;; This function calls:
  3582 ;;		_I2C_Master_Wait
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;;		_leer_temperatura
  3586 ;;		_envio_ESP
  3587 ;;		_leer_x
  3588 ;;		_enviar_x
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592     015E                     _I2C_Master_Start:	
  3593                           ;psect for function _I2C_Master_Start
  3594                           
  3595                           
  3596                           ;I2C.c: 41:     I2C_Master_Wait();
  3597                           
  3598                           ;incstack = 0
  3599                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3600     015E  120A  118A  217C   	fcall	_I2C_Master_Wait
  3601                           
  3602                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  3603     0161  1411               	bsf	17,0	;volatile
  3604     0162  0008               	return
  3605     0163                     __end_of_I2C_Master_Start:
  3606                           
  3607                           	psect	text22
  3608     017C                     __ptext22:	
  3609 ;; *************** function _I2C_Master_Wait *****************
  3610 ;; Defined at:
  3611 ;;		line 32 in file "I2C.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;		None
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 300/100
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3625 ;;      Params:         0       0       0       0       0
  3626 ;;      Locals:         0       0       0       0       0
  3627 ;;      Temps:          0       0       0       0       0
  3628 ;;      Totals:         0       0       0       0       0
  3629 ;;Total ram usage:        0 bytes
  3630 ;; Hardware stack levels used: 1
  3631 ;; This function calls:
  3632 ;;		Nothing
  3633 ;; This function is called by:
  3634 ;;		_I2C_Master_Start
  3635 ;;		_I2C_Master_RepeatedStart
  3636 ;;		_I2C_Master_Stop
  3637 ;;		_I2C_Master_Write
  3638 ;;		_I2C_Master_Read
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642     017C                     _I2C_Master_Wait:	
  3643                           ;psect for function _I2C_Master_Wait
  3644                           
  3645     017C                     l176:	
  3646                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3650                           
  3651     017C  1683               	bsf	3,5	;RP0=1, select bank1
  3652     017D  1303               	bcf	3,6	;RP1=0, select bank1
  3653     017E  1914               	btfsc	20,2	;volatile
  3654     017F  297C               	goto	l176
  3655     0180  0811               	movf	17,w	;volatile
  3656     0181  391F               	andlw	31
  3657     0182  1903               	btfsc	3,2
  3658     0183  0008               	return
  3659     0184  297C               	goto	l176
  3660     0185                     __end_of_I2C_Master_Wait:
  3661                           
  3662                           	psect	text23
  3663     022A                     __ptext23:	
  3664 ;; *************** function _Lcd_Write_String *****************
  3665 ;; Defined at:
  3666 ;;		line 98 in file "LCD.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  a               1    wreg     PTR unsigned char 
  3669 ;;		 -> STR_2(8), STR_1(6), 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  a               1    7[COMMON] PTR unsigned char 
  3672 ;;		 -> STR_2(8), STR_1(6), 
  3673 ;;  i               2    5[COMMON] int 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3683 ;;      Params:         0       0       0       0       0
  3684 ;;      Locals:         3       0       0       0       0
  3685 ;;      Temps:          0       0       0       0       0
  3686 ;;      Totals:         3       0       0       0       0
  3687 ;;Total ram usage:        3 bytes
  3688 ;; Hardware stack levels used: 1
  3689 ;; Hardware stack levels required when called: 2
  3690 ;; This function calls:
  3691 ;;		_Lcd_Write_Char
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697     022A                     _Lcd_Write_String:	
  3698                           ;psect for function _Lcd_Write_String
  3699                           
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3703                           ;Lcd_Write_String@a stored from wreg
  3704     022A  00F7               	movwf	Lcd_Write_String@a
  3705                           
  3706                           ;LCD.c: 99:     int i;;LCD.c: 100:     for (i = 0; a[i] != '\0'; i++)
  3707     022B  01F5               	clrf	Lcd_Write_String@i
  3708     022C  01F6               	clrf	Lcd_Write_String@i+1
  3709     022D                     l1746:
  3710     022D  0875               	movf	Lcd_Write_String@i,w
  3711     022E  0777               	addwf	Lcd_Write_String@a,w
  3712     022F  0084               	movwf	4
  3713     0230  120A  118A  2003  120A  118A  	fcall	stringdir
  3714     0235  3A00               	xorlw	0
  3715     0236  1903               	btfsc	3,2
  3716     0237  0008               	return
  3717                           
  3718                           ;LCD.c: 101:         Lcd_Write_Char(a[i]);
  3719     0238  0875               	movf	Lcd_Write_String@i,w
  3720     0239  0777               	addwf	Lcd_Write_String@a,w
  3721     023A  0084               	movwf	4
  3722     023B  120A  118A  2003  120A  118A  	fcall	stringdir
  3723     0240  120A  118A  22C6  120A  118A  	fcall	_Lcd_Write_Char
  3724     0245  3001               	movlw	1
  3725     0246  07F5               	addwf	Lcd_Write_String@i,f
  3726     0247  1803               	skipnc
  3727     0248  0AF6               	incf	Lcd_Write_String@i+1,f
  3728     0249  3000               	movlw	0
  3729     024A  07F6               	addwf	Lcd_Write_String@i+1,f
  3730     024B  2A2D               	goto	l1746
  3731     024C                     __end_of_Lcd_Write_String:
  3732                           
  3733                           	psect	text24
  3734     02C6                     __ptext24:	
  3735 ;; *************** function _Lcd_Write_Char *****************
  3736 ;; Defined at:
  3737 ;;		line 83 in file "LCD.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  a               1    wreg     unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  a               1    4[COMMON] unsigned char 
  3742 ;;  y               1    3[COMMON] unsigned char 
  3743 ;;  temp            1    2[COMMON] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, status,2, status,0, pclath, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 300/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3753 ;;      Params:         0       0       0       0       0
  3754 ;;      Locals:         3       0       0       0       0
  3755 ;;      Temps:          1       0       0       0       0
  3756 ;;      Totals:         4       0       0       0       0
  3757 ;;Total ram usage:        4 bytes
  3758 ;; Hardware stack levels used: 1
  3759 ;; Hardware stack levels required when called: 1
  3760 ;; This function calls:
  3761 ;;		_Lcd_Port
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;;		_Escribir_dato
  3765 ;;		_Lcd_Write_String
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769     02C6                     _Lcd_Write_Char:	
  3770                           ;psect for function _Lcd_Write_Char
  3771                           
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3775                           ;Lcd_Write_Char@a stored from wreg
  3776     02C6  00F4               	movwf	Lcd_Write_Char@a
  3777                           
  3778                           ;LCD.c: 84:     char temp, y;;LCD.c: 85:     temp = a & 0x0F;
  3779     02C7  0874               	movf	Lcd_Write_Char@a,w
  3780     02C8  390F               	andlw	15
  3781     02C9  00F2               	movwf	Lcd_Write_Char@temp
  3782                           
  3783                           ;LCD.c: 86:     y = a & 0xF0;
  3784     02CA  0874               	movf	Lcd_Write_Char@a,w
  3785     02CB  39F0               	andlw	240
  3786     02CC  00F3               	movwf	Lcd_Write_Char@y
  3787                           
  3788                           ;LCD.c: 87:     PORTDbits.RD2 = 1;
  3789     02CD  1283               	bcf	3,5	;RP0=0, select bank0
  3790     02CE  1303               	bcf	3,6	;RP1=0, select bank0
  3791     02CF  1508               	bsf	8,2	;volatile
  3792                           
  3793                           ;LCD.c: 88:     Lcd_Port(y >> 4);
  3794     02D0  0873               	movf	Lcd_Write_Char@y,w
  3795     02D1  00F1               	movwf	??_Lcd_Write_Char
  3796     02D2  3004               	movlw	4
  3797     02D3                     u885:
  3798     02D3  1003               	clrc
  3799     02D4  0CF1               	rrf	??_Lcd_Write_Char,f
  3800     02D5  3EFF               	addlw	-1
  3801     02D6  1D03               	skipz
  3802     02D7  2AD3               	goto	u885
  3803     02D8  0871               	movf	??_Lcd_Write_Char,w
  3804     02D9  120A  118A  21A1  120A  118A  	fcall	_Lcd_Port
  3805                           
  3806                           ;LCD.c: 89:     RD3 = 1;
  3807     02DE  1588               	bsf	8,3	;volatile
  3808                           
  3809                           ;LCD.c: 90:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3810     02DF  301A               	movlw	26
  3811     02E0  00F1               	movwf	??_Lcd_Write_Char
  3812     02E1                     u1497:
  3813     02E1  0BF1               	decfsz	??_Lcd_Write_Char,f
  3814     02E2  2AE1               	goto	u1497
  3815     02E3  0000               	nop
  3816                           
  3817                           ;LCD.c: 91:     RD3 = 0;
  3818     02E4  1283               	bcf	3,5	;RP0=0, select bank0
  3819     02E5  1303               	bcf	3,6	;RP1=0, select bank0
  3820     02E6  1188               	bcf	8,3	;volatile
  3821                           
  3822                           ;LCD.c: 92:     Lcd_Port(temp);
  3823     02E7  0872               	movf	Lcd_Write_Char@temp,w
  3824     02E8  120A  118A  21A1  120A  118A  	fcall	_Lcd_Port
  3825                           
  3826                           ;LCD.c: 93:     RD3 = 1;
  3827     02ED  1588               	bsf	8,3	;volatile
  3828                           
  3829                           ;LCD.c: 94:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3830     02EE  301A               	movlw	26
  3831     02EF  00F1               	movwf	??_Lcd_Write_Char
  3832     02F0                     u1507:
  3833     02F0  0BF1               	decfsz	??_Lcd_Write_Char,f
  3834     02F1  2AF0               	goto	u1507
  3835     02F2  0000               	nop
  3836                           
  3837                           ;LCD.c: 95:     RD3 = 0;
  3838     02F3  1283               	bcf	3,5	;RP0=0, select bank0
  3839     02F4  1303               	bcf	3,6	;RP1=0, select bank0
  3840     02F5  1188               	bcf	8,3	;volatile
  3841     02F6  0008               	return
  3842     02F7                     __end_of_Lcd_Write_Char:
  3843                           
  3844                           	psect	text25
  3845     04D3                     __ptext25:	
  3846 ;; *************** function _Lcd_Init *****************
  3847 ;; Defined at:
  3848 ;;		line 65 in file "LCD.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;		None
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, status,0, pclath, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 300/100
  3859 ;;		On exit  : 300/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3862 ;;      Params:         0       0       0       0       0
  3863 ;;      Locals:         0       0       0       0       0
  3864 ;;      Temps:          2       0       0       0       0
  3865 ;;      Totals:         2       0       0       0       0
  3866 ;;Total ram usage:        2 bytes
  3867 ;; Hardware stack levels used: 1
  3868 ;; Hardware stack levels required when called: 2
  3869 ;; This function calls:
  3870 ;;		_Lcd_Cmd
  3871 ;;		_Lcd_Port
  3872 ;; This function is called by:
  3873 ;;		_main
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877     04D3                     _Lcd_Init:	
  3878                           ;psect for function _Lcd_Init
  3879                           
  3880                           
  3881                           ;LCD.c: 66:     Lcd_Port(0x00);
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3885     04D3  3000               	movlw	0
  3886     04D4  120A  118A  21A1  120A  118A  	fcall	_Lcd_Port
  3887                           
  3888                           ;LCD.c: 67:     _delay((unsigned long)((20)*(8000000/4000.0)));
  3889     04D9  3034               	movlw	52
  3890     04DA  00F5               	movwf	??_Lcd_Init+1
  3891     04DB  30F1               	movlw	241
  3892     04DC  00F4               	movwf	??_Lcd_Init
  3893     04DD                     u1517:
  3894     04DD  0BF4               	decfsz	??_Lcd_Init,f
  3895     04DE  2CDD               	goto	u1517
  3896     04DF  0BF5               	decfsz	??_Lcd_Init+1,f
  3897     04E0  2CDD               	goto	u1517
  3898     04E1  2CE2               	nop2
  3899                           
  3900                           ;LCD.c: 68:     Lcd_Cmd(0x03);
  3901     04E2  3003               	movlw	3
  3902     04E3  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3903                           
  3904                           ;LCD.c: 69:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3905     04E8  300D               	movlw	13
  3906     04E9  00F5               	movwf	??_Lcd_Init+1
  3907     04EA  30FB               	movlw	251
  3908     04EB  00F4               	movwf	??_Lcd_Init
  3909     04EC                     u1527:
  3910     04EC  0BF4               	decfsz	??_Lcd_Init,f
  3911     04ED  2CEC               	goto	u1527
  3912     04EE  0BF5               	decfsz	??_Lcd_Init+1,f
  3913     04EF  2CEC               	goto	u1527
  3914     04F0  2CF1               	nop2
  3915                           
  3916                           ;LCD.c: 70:     Lcd_Cmd(0x03);
  3917     04F1  3003               	movlw	3
  3918     04F2  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3919                           
  3920                           ;LCD.c: 71:     _delay((unsigned long)((11)*(8000000/4000.0)));
  3921     04F7  301D               	movlw	29
  3922     04F8  00F5               	movwf	??_Lcd_Init+1
  3923     04F9  3091               	movlw	145
  3924     04FA  00F4               	movwf	??_Lcd_Init
  3925     04FB                     u1537:
  3926     04FB  0BF4               	decfsz	??_Lcd_Init,f
  3927     04FC  2CFB               	goto	u1537
  3928     04FD  0BF5               	decfsz	??_Lcd_Init+1,f
  3929     04FE  2CFB               	goto	u1537
  3930                           
  3931                           ;LCD.c: 72:     Lcd_Cmd(0x03);
  3932     04FF  3003               	movlw	3
  3933     0500  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3934                           
  3935                           ;LCD.c: 74:     Lcd_Cmd(0x02);
  3936     0505  3002               	movlw	2
  3937     0506  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3938                           
  3939                           ;LCD.c: 75:     Lcd_Cmd(0x02);
  3940     050B  3002               	movlw	2
  3941     050C  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3942                           
  3943                           ;LCD.c: 76:     Lcd_Cmd(0x08);
  3944     0511  3008               	movlw	8
  3945     0512  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3946                           
  3947                           ;LCD.c: 77:     Lcd_Cmd(0x00);
  3948     0517  3000               	movlw	0
  3949     0518  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3950                           
  3951                           ;LCD.c: 78:     Lcd_Cmd(0x0C);
  3952     051D  300C               	movlw	12
  3953     051E  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3954                           
  3955                           ;LCD.c: 79:     Lcd_Cmd(0x00);
  3956     0523  3000               	movlw	0
  3957     0524  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  3958                           
  3959                           ;LCD.c: 80:     Lcd_Cmd(0x06);
  3960     0529  3006               	movlw	6
  3961     052A  120A  118A  21B9   	fcall	_Lcd_Cmd
  3962     052D  0008               	return
  3963     052E                     __end_of_Lcd_Init:
  3964                           
  3965                           	psect	text26
  3966     0185                     __ptext26:	
  3967 ;; *************** function _Lcd_Clear *****************
  3968 ;; Defined at:
  3969 ;;		line 43 in file "LCD.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 300/0
  3980 ;;		On exit  : 300/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3983 ;;      Params:         0       0       0       0       0
  3984 ;;      Locals:         0       0       0       0       0
  3985 ;;      Temps:          0       0       0       0       0
  3986 ;;      Totals:         0       0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used: 1
  3989 ;; Hardware stack levels required when called: 2
  3990 ;; This function calls:
  3991 ;;		_Lcd_Cmd
  3992 ;; This function is called by:
  3993 ;;		_main
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997     0185                     _Lcd_Clear:	
  3998                           ;psect for function _Lcd_Clear
  3999                           
  4000                           
  4001                           ;LCD.c: 44:     Lcd_Cmd(0);
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4005     0185  3000               	movlw	0
  4006     0186  120A  118A  21B9  120A  118A  	fcall	_Lcd_Cmd
  4007                           
  4008                           ;LCD.c: 45:     Lcd_Cmd(1);
  4009     018B  3001               	movlw	1
  4010     018C  120A  118A  21B9   	fcall	_Lcd_Cmd
  4011     018F  0008               	return
  4012     0190                     __end_of_Lcd_Clear:
  4013                           
  4014                           	psect	text27
  4015     01B9                     __ptext27:	
  4016 ;; *************** function _Lcd_Cmd *****************
  4017 ;; Defined at:
  4018 ;;		line 35 in file "LCD.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  a               1    wreg     unsigned char 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  a               1    3[COMMON] unsigned char 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 300/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4032 ;;      Params:         0       0       0       0       0
  4033 ;;      Locals:         1       0       0       0       0
  4034 ;;      Temps:          2       0       0       0       0
  4035 ;;      Totals:         3       0       0       0       0
  4036 ;;Total ram usage:        3 bytes
  4037 ;; Hardware stack levels used: 1
  4038 ;; Hardware stack levels required when called: 1
  4039 ;; This function calls:
  4040 ;;		_Lcd_Port
  4041 ;; This function is called by:
  4042 ;;		_Lcd_Clear
  4043 ;;		_Lcd_Set_Cursor
  4044 ;;		_Lcd_Init
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048     01B9                     _Lcd_Cmd:	
  4049                           ;psect for function _Lcd_Cmd
  4050                           
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4054                           ;Lcd_Cmd@a stored from wreg
  4055     01B9  00F3               	movwf	Lcd_Cmd@a
  4056                           
  4057                           ;LCD.c: 36:     PORTDbits.RD2 = 0;
  4058     01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4059     01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4060     01BC  1108               	bcf	8,2	;volatile
  4061                           
  4062                           ;LCD.c: 37:     Lcd_Port(a);
  4063     01BD  0873               	movf	Lcd_Cmd@a,w
  4064     01BE  120A  118A  21A1  120A  118A  	fcall	_Lcd_Port
  4065                           
  4066                           ;LCD.c: 38:     RD3 = 1;
  4067     01C3  1588               	bsf	8,3	;volatile
  4068                           
  4069                           ;LCD.c: 39:     _delay((unsigned long)((4)*(8000000/4000.0)));
  4070     01C4  300B               	movlw	11
  4071     01C5  00F2               	movwf	??_Lcd_Cmd+1
  4072     01C6  3062               	movlw	98
  4073     01C7  00F1               	movwf	??_Lcd_Cmd
  4074     01C8                     u1547:
  4075     01C8  0BF1               	decfsz	??_Lcd_Cmd,f
  4076     01C9  29C8               	goto	u1547
  4077     01CA  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4078     01CB  29C8               	goto	u1547
  4079     01CC  0000               	nop
  4080                           
  4081                           ;LCD.c: 40:     RD3 = 0;
  4082     01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4083     01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4084     01CF  1188               	bcf	8,3	;volatile
  4085     01D0  0008               	return
  4086     01D1                     __end_of_Lcd_Cmd:
  4087                           
  4088                           	psect	text28
  4089     01A1                     __ptext28:	
  4090 ;; *************** function _Lcd_Port *****************
  4091 ;; Defined at:
  4092 ;;		line 13 in file "LCD.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;  a               1    wreg     unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  a               1    0[COMMON] unsigned char 
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg
  4101 ;; Tracked objects:
  4102 ;;		On entry : 200/0
  4103 ;;		On exit  : 300/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4106 ;;      Params:         0       0       0       0       0
  4107 ;;      Locals:         1       0       0       0       0
  4108 ;;      Temps:          0       0       0       0       0
  4109 ;;      Totals:         1       0       0       0       0
  4110 ;;Total ram usage:        1 bytes
  4111 ;; Hardware stack levels used: 1
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_Lcd_Cmd
  4116 ;;		_Lcd_Init
  4117 ;;		_Lcd_Write_Char
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121     01A1                     _Lcd_Port:	
  4122                           ;psect for function _Lcd_Port
  4123                           
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in _Lcd_Port: [wreg]
  4127                           ;Lcd_Port@a stored from wreg
  4128     01A1  00F0               	movwf	Lcd_Port@a
  4129                           
  4130                           ;LCD.c: 14:     if (a & 1)
  4131     01A2  1C70               	btfss	Lcd_Port@a,0
  4132     01A3  29A7               	goto	l213
  4133                           
  4134                           ;LCD.c: 15:         RD4 = 1;
  4135     01A4  1283               	bcf	3,5	;RP0=0, select bank0
  4136     01A5  1608               	bsf	8,4	;volatile
  4137     01A6  29A9               	goto	l214
  4138     01A7                     l213:	
  4139                           ;LCD.c: 16:     else
  4140                           
  4141                           
  4142                           ;LCD.c: 17:         RD4 = 0;
  4143     01A7  1283               	bcf	3,5	;RP0=0, select bank0
  4144     01A8  1208               	bcf	8,4	;volatile
  4145     01A9                     l214:
  4146                           
  4147                           ;LCD.c: 19:     if (a & 2)
  4148     01A9  1CF0               	btfss	Lcd_Port@a,1
  4149     01AA  29AD               	goto	l215
  4150                           
  4151                           ;LCD.c: 20:         RD5 = 1;
  4152     01AB  1688               	bsf	8,5	;volatile
  4153     01AC  29AE               	goto	l216
  4154     01AD                     l215:	
  4155                           ;LCD.c: 21:     else
  4156                           
  4157                           
  4158                           ;LCD.c: 22:         RD5 = 0;
  4159     01AD  1288               	bcf	8,5	;volatile
  4160     01AE                     l216:
  4161                           
  4162                           ;LCD.c: 24:     if (a & 4)
  4163     01AE  1D70               	btfss	Lcd_Port@a,2
  4164     01AF  29B2               	goto	l217
  4165                           
  4166                           ;LCD.c: 25:         RD6 = 1;
  4167     01B0  1708               	bsf	8,6	;volatile
  4168     01B1  29B3               	goto	l218
  4169     01B2                     l217:	
  4170                           ;LCD.c: 26:     else
  4171                           
  4172                           
  4173                           ;LCD.c: 27:         RD6 = 0;
  4174     01B2  1308               	bcf	8,6	;volatile
  4175     01B3                     l218:
  4176                           
  4177                           ;LCD.c: 29:     if (a & 8)
  4178     01B3  1DF0               	btfss	Lcd_Port@a,3
  4179     01B4  29B7               	goto	l219
  4180                           
  4181                           ;LCD.c: 30:         RD7 = 1;
  4182     01B5  1788               	bsf	8,7	;volatile
  4183     01B6  0008               	return
  4184     01B7                     l219:	
  4185                           ;LCD.c: 31:     else
  4186                           
  4187                           
  4188                           ;LCD.c: 32:         RD7 = 0;
  4189     01B7  1388               	bcf	8,7	;volatile
  4190     01B8  0008               	return
  4191     01B9                     __end_of_Lcd_Port:
  4192     007E                     btemp	set	126	;btemp
  4193     007E                     wtemp0	set	126
  4194                           
  4195                           	psect	idloc
  4196                           
  4197                           ;Config register IDLOC0 @ 0x2000
  4198                           ;	unspecified, using default values
  4199     2000                     	org	8192
  4200     2000  3FFF               	dw	16383
  4201                           
  4202                           ;Config register IDLOC1 @ 0x2001
  4203                           ;	unspecified, using default values
  4204     2001                     	org	8193
  4205     2001  3FFF               	dw	16383
  4206                           
  4207                           ;Config register IDLOC2 @ 0x2002
  4208                           ;	unspecified, using default values
  4209     2002                     	org	8194
  4210     2002  3FFF               	dw	16383
  4211                           
  4212                           ;Config register IDLOC3 @ 0x2003
  4213                           ;	unspecified, using default values
  4214     2003                     	org	8195
  4215     2003  3FFF               	dw	16383
  4216                           
  4217                           	psect	config
  4218                           
  4219                           ;Config register CONFIG1 @ 0x2007
  4220                           ;	Oscillator Selection bits
  4221                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4222                           ;	Watchdog Timer Enable bit
  4223                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4224                           ;	Power-up Timer Enable bit
  4225                           ;	PWRTE = OFF, PWRT disabled
  4226                           ;	RE3/MCLR pin function select bit
  4227                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4228                           ;	Code Protection bit
  4229                           ;	CP = OFF, Program memory code protection is disabled
  4230                           ;	Data Code Protection bit
  4231                           ;	CPD = OFF, Data memory code protection is disabled
  4232                           ;	Brown Out Reset Selection bits
  4233                           ;	BOREN = OFF, BOR disabled
  4234                           ;	Internal External Switchover bit
  4235                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4236                           ;	Fail-Safe Clock Monitor Enabled bit
  4237                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4238                           ;	Low Voltage Programming Enable bit
  4239                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4240                           ;	In-Circuit Debugger Mode bit
  4241                           ;	DEBUG = 0x1, unprogramme  4242     2007                     	org	8199
  4243     2007  20D4               	dw	8404
  4244                           
  4245                           ;Config register CONFIG2 @ 0x2008
  4246                           ;	Brown-out Reset Selection bit
  4247                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4248                           ;	Flash Program Memory Self Write Enable bits
  4249                           ;	WRT = OFF, Write protection off
  4250     2008                     	org	8200
  4251     2008  3FFF               	dw	16383

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_Escribir_dato
    _I2C_Master_Init->___lldiv
    _leer_x->_convertir
    _convertir->___bmul
    _leer_temperatura->_Escribir_dato
    _Escribir_dato->_descomponer
    _descomponer->___lbmod
    _Lcd_Set_Cursor->_Lcd_Cmd
    _envio_ESP->_I2C_Master_Write
    _enviar_x->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_portsetup
    _portsetup->_I2C_Master_Init
    _leer_temperatura->_Escribir_dato

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   21253
                                             11 BANK0      4     4      0
                      _Escribir_dato
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                           _enviar_x
                          _envio_ESP
                   _leer_temperatura
                             _leer_x
                          _portsetup
                        _setupINTOSC
 ---------------------------------------------------------------------------------
 (1) _setupINTOSC                                          1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _portsetup                                            3     3      0     412
                                              8 BANK0      3     3      0
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _leer_x                                               4     4      0    2468
                                              9 COMMON     4     4      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                          _convertir
 ---------------------------------------------------------------------------------
 (2) _convertir                                            5     5      0     281
                                              4 COMMON     5     5      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _leer_temperatura                                     0     0      0    6337
                      _Escribir_dato
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     197
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _Escribir_dato                                        3     1      2    4218
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                        _descomponer
                          _inttochar
 ---------------------------------------------------------------------------------
 (3) _inttochar                                            1     1      0     220
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _descomponer                                          6     3      3    1256
                                              6 COMMON     6     3      3
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              6     5      1     374
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     377
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       6     5      1     760
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _envio_ESP                                            2     2      0    1922
                                              2 COMMON     2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _enviar_x                                             4     3      1    2194
                                              2 COMMON     4     3      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1922
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     334
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_dato
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _descomponer
       ___lbdiv
       ___lbmod
     _inttochar
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _Lcd_Clear
     _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_Char
   _Lcd_Write_String
     _Lcd_Write_Char
   _enviar_x
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
   _envio_ESP
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
   _leer_temperatura
     _Escribir_dato
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
   _leer_x
     _I2C_Master_Read
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
     _convertir
       ___bmul
   _portsetup
     _I2C_Master_Init
       ___lldiv
   _setupINTOSC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      30       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      30      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Mar 08 23:22:28 2023

                               pc 0002                    ___bmul@product 0072                    ?_Escribir_dato 007C  
                              fsr 0004                               l213 01A7                               l214 01A9  
                             l215 01AD                               l216 01AE                               l217 01B2  
                             l218 01B3                               l219 01B7                               l176 017C  
                             l280 044E                               l281 0457                               l194 026A  
                             l282 0460                               l195 026B                               l283 0469  
                             l284 0472                               l285 047B                               l286 0483  
                             l584 0203                               _RD3 0043                               _RD4 0044  
                             _RD5 0045                               _RD6 0046                               _RD7 0047  
                             u815 01F1                               u855 03D3                               u875 03F2  
                             u885 02D3                               _min 002D                               _sec 002F  
                             fsr0 0004                               indf 0000                              l1422 0210  
                            l1424 0219                              l1512 0388                              l1504 037D  
                            l1434 0228                              l1442 01EE                              l1602 0192  
                            l1620 053E                              l1550 03A5                              l1542 039F  
                            l1534 0399                              l1526 0394                              l1606 0198  
                            l1630 0576                              l1622 054E                              l1464 03E8  
                            l1712 0489                              l1634 0583                              l1810 06A8  
                            l1804 0687                              l1590 03C3                              l1582 03BD  
                            l1574 03B7                              l1566 03B1                              l1558 03AB  
                            l1822 06D6                              l1814 06AC                              l1840 06F3  
                            l1832 06E5                              l1824 06D7                              l1746 022D  
                            l1850 06FF                              l1834 06E7                              l1842 06F4  
                            l1852 0702                              l1860 070D                              l1776 0639  
                            l1882 07AD                              l1858 070B                              l1876 0774  
                            l1888 07BA                              STR_1 0011                              STR_2 0009  
                            u1105 0565                              u1115 0577                              u1135 0305  
                            u1155 01D8                              u1075 0542                              u1095 0550  
                            u1507 02F0                              u1517 04DD                              u1527 04EC  
                            u1537 04FB                              u1457 0750                              u1547 01C8  
                            u1467 07A3                              u1477 02B2                              u1487 05E8  
                            u1497 02E1                              _WPUB 0095                 ?_Lcd_Write_String 0070  
__end_of_I2C_Master_RepeatedStart 016D                              _main 05EE                              _modo 002B  
                            btemp 007E                              start 0000                ??_Lcd_Write_String 0075  
                 __end_of_Lcd_Cmd 01D1                 ___bmul@multiplier 0073                  ?_I2C_Master_Init 0033  
                ?_I2C_Master_Read 0070                  ?_I2C_Master_Wait 0070                  ?_I2C_Master_Stop 0070  
                           ?_main 0070                   __end_of___lbdiv 022A                   __end_of___lbmod 0209  
                           _ANSEL 0188                   __end_of___lldiv 058C                             _SERVO 002A  
                           _PORTB 0006                             _PORTD 0008                             _TRISB 0086  
                           _TRISD 0088                             pclath 000A                             status 0003  
                           wtemp0 007E                   ___lbdiv@divisor 0070                       leer_x@valor 007C  
                 ___lbdiv@counter 0073                  _leer_temperatura 0271                  __end_of_Lcd_Init 052E  
                __end_of_Lcd_Port 01B9                   __initialization 07F5                   ??_Escribir_dato 007E  
                    __end_of_main 07F5                            ??_main 003E                 ?_I2C_Master_Start 0070  
               ?_I2C_Master_Write 0070                ??_I2C_Master_Start 0070                ??_I2C_Master_Write 0072  
                          _ANSELH 0189                         ??_Lcd_Cmd 0071                            _SSPADD 0093  
                          _SSPCON 0014                            _SSPBUF 0013          _I2C_Master_RepeatedStart 0168  
                          ___bmul 0190                            _decena 0031                         ??___lbdiv 0071  
                       ??___lbmod 0071                         ??___lldiv 0078                  __end_of_enviar_x 035B  
                          _buffer 0024                            _conver 0020                            _leer_x 0407  
                          _valADC 0027                            _unidad 0032                      ?_setupINTOSC 0070  
                ___lbdiv@dividend 0072                   Lcd_Set_Cursor@a 0076                   Lcd_Set_Cursor@b 0074  
                 Lcd_Set_Cursor@y 0078                   Lcd_Set_Cursor@z 0077                   ___lbmod@divisor 0070  
         __end_of__initialization 07FC                   ___lbmod@counter 0074                 __end_of_Lcd_Clear 0190  
             ___bmul@multiplicand 0070                   descomponer@cent 0079                    __pcstackCOMMON 0070  
                ___lbdiv@quotient 0074                    _Lcd_Set_Cursor 03C9                    _OPTION_REGbits 0081  
                       ?_Lcd_Init 0070                         ?_Lcd_Port 0070                      enviar_x@val1 0075  
                    enviar_x@val2 0072                        __pbssBANK0 0020                        __pmaintext 05EE  
                         ?___bmul 0070               convertir@conversion 0077                           ?_leer_x 0070  
          __end_of_Lcd_Set_Cursor 0407          __end_of_leer_temperatura 0299                        ??_Lcd_Init 0074  
                      ??_Lcd_Port 0070                           _SSPCON2 0091                           _SSPSTAT 0094  
                      __stringtab 0003                         ?_enviar_x 0072                    _Lcd_Write_Char 02C6  
                         _Lcd_Cmd 01B9                           ___lbdiv 0209                           ___lbmod 01EA  
                         ___lldiv 052E                 __end_of_convertir 01EA                   ?_Lcd_Set_Cursor 0074  
               __end_of_envio_ESP 05EE                           __ptext1 0446                           __ptext2 0299  
                         __ptext3 02F7                           __ptext4 052E                           __ptext5 0407  
                         __ptext6 01D1                           __ptext7 0190                           __ptext8 0168  
                         __ptext9 0271                           _minutos 002C                           _tempint 0030  
                         clrloop0 0175                 __end_of_inttochar 03C9            __end_of_Lcd_Write_Char 02F7  
            end_of_initialization 07FC        ??_I2C_Master_RepeatedStart 0070                        ??_enviar_x 0073  
                 ___lldiv@divisor 0070                   ___lldiv@counter 007D                  I2C_Master_Init@c 0033  
                I2C_Master_Read@a 0070                     leer_x@address 007B                         Lcd_Port@a 0070  
               __end_of_portsetup 02C6             __end_of_Escribir_dato 04D3                         _PORTBbits 0006  
                       _PORTDbits 0008                     ??_descomponer 0079                  ___lbmod@dividend 0073  
                       _TRISCbits 0087                   ?_Lcd_Write_Char 0070                 Lcd_Write_String@a 0077  
               Lcd_Write_String@i 0075                       ___lbmod@rem 0075                         _Lcd_Clear 0185  
                  __end_of___bmul 01A1                  _Lcd_Write_String 022A                    __end_of_leer_x 0446  
             start_initialization 07F5               __end_of_descomponer 038E                 ??_I2C_Master_Init 0037  
               ??_I2C_Master_Read 0072                 ??_I2C_Master_Wait 0070                 ??_I2C_Master_Stop 0070  
               Escribir_dato@dato 0033                 Escribir_dato@posx 007C                 Escribir_dato@posy 007D  
                      ?_Lcd_Clear 0070                          ??___bmul 0071                          ??_leer_x 0079  
                 Lcd_Write_Char@a 0074                   Lcd_Write_Char@y 0073                         ___latbits 0002  
                  descomponer@dec 007B                     __pcstackBANK0 0033                 ?_leer_temperatura 0070  
                  descomponer@num 0078                    descomponer@pos 0076                    descomponer@uni 007A  
              ??_leer_temperatura 007E                   setupINTOSC@IRCF 0070                          ?_Lcd_Cmd 0070  
                _I2C_Master_Start 015E                  _I2C_Master_Write 016D                  ??_Lcd_Set_Cursor 0075  
                    inttochar@num 0070                          ?___lbdiv 0070                          ?___lbmod 0070  
                        ?___lldiv 0070                         __pstrings 0003                         _convertir 01D1  
                     _descomponer 035B                         _envio_ESP 058C                         _inttochar 038E  
                       clear_ram0 0174                          Lcd_Cmd@a 0073                       ??_Lcd_Clear 0074  
                     __stringbase 0008                     ??_setupINTOSC 0070                         _portsetup 0299  
                      ?_convertir 0070                  ??_Lcd_Write_Char 0071                        ?_envio_ESP 0070  
                 convertir@decena 0076                          _Lcd_Init 04D3                          _Lcd_Port 01A1  
             I2C_Master_Read@temp 0074                   convertir@unidad 0075          __end_of_Lcd_Write_String 024C  
                      ?_inttochar 0070         ?_I2C_Master_RepeatedStart 0070                __end_of__stringtab 0009  
                      ?_portsetup 0070                   _I2C_Master_Init 02F7                   _I2C_Master_Read 024C  
                 _I2C_Master_Wait 017C                   _I2C_Master_Stop 0163                          _main$202 0041  
                        __ptext10 024C                          __ptext11 048C                          __ptext20 0163  
                        __ptext12 038E                          __ptext21 015E                          __ptext13 035B  
                        __ptext22 017C                          __ptext14 01EA                          __ptext23 022A  
                        __ptext15 0209                          __ptext24 02C6                          __ptext16 03C9  
                        __ptext25 04D3                          __ptext17 058C                          __ptext26 0185  
                        __ptext18 0328                          __ptext27 01B9                          __ptext19 016D  
                        __ptext28 01A1               __end_of_setupINTOSC 048C                          _enviar_x 0328  
                        _segundos 002E                    convertir@valor 0078                       ??_convertir 0074  
        __end_of_I2C_Master_Start 0163          __end_of_I2C_Master_Write 0174                       ??_envio_ESP 0072  
              Lcd_Write_Char@temp 0072                  ___lldiv@dividend 0074                       ??_inttochar 0070  
                       stringcode 0003                        _OSCCONbits 008F           __end_of_I2C_Master_Init 0328  
         __end_of_I2C_Master_Read 0271           __end_of_I2C_Master_Wait 0185                     _Escribir_dato 048C  
         __end_of_I2C_Master_Stop 0168                Lcd_Set_Cursor@temp 0079                       ??_portsetup 003B  
                     _setupINTOSC 0446                      ?_descomponer 0076                  ___lldiv@quotient 0079  
               I2C_Master_Write@d 0070                          stringdir 0003                          stringtab 0003  
                     _SSPCON2bits 0091  
